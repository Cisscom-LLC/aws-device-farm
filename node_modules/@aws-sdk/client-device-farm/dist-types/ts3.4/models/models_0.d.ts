import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { DeviceFarmServiceException as __BaseException } from "./DeviceFarmServiceException";
export interface TrialMinutes {
  total?: number;
  remaining?: number;
}
export declare enum DevicePlatform {
  ANDROID = "ANDROID",
  IOS = "IOS",
}
export interface AccountSettings {
  awsAccountNumber?: string;
  unmeteredDevices?: Record<string, number>;
  unmeteredRemoteAccessDevices?: Record<string, number>;
  maxJobTimeoutMinutes?: number;
  trialMinutes?: TrialMinutes;
  maxSlots?: Record<string, number>;
  defaultJobTimeoutMinutes?: number;
  skipAppResign?: boolean;
}
export declare class ArgumentException extends __BaseException {
  readonly name: "ArgumentException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ArgumentException, __BaseException>);
}
export declare enum ArtifactType {
  APPIUM_JAVA_OUTPUT = "APPIUM_JAVA_OUTPUT",
  APPIUM_JAVA_XML_OUTPUT = "APPIUM_JAVA_XML_OUTPUT",
  APPIUM_PYTHON_OUTPUT = "APPIUM_PYTHON_OUTPUT",
  APPIUM_PYTHON_XML_OUTPUT = "APPIUM_PYTHON_XML_OUTPUT",
  APPIUM_SERVER_OUTPUT = "APPIUM_SERVER_OUTPUT",
  APPLICATION_CRASH_REPORT = "APPLICATION_CRASH_REPORT",
  AUTOMATION_OUTPUT = "AUTOMATION_OUTPUT",
  CALABASH_JAVA_XML_OUTPUT = "CALABASH_JAVA_XML_OUTPUT",
  CALABASH_JSON_OUTPUT = "CALABASH_JSON_OUTPUT",
  CALABASH_PRETTY_OUTPUT = "CALABASH_PRETTY_OUTPUT",
  CALABASH_STANDARD_OUTPUT = "CALABASH_STANDARD_OUTPUT",
  CUSTOMER_ARTIFACT = "CUSTOMER_ARTIFACT",
  CUSTOMER_ARTIFACT_LOG = "CUSTOMER_ARTIFACT_LOG",
  DEVICE_LOG = "DEVICE_LOG",
  EXERCISER_MONKEY_OUTPUT = "EXERCISER_MONKEY_OUTPUT",
  EXPLORER_EVENT_LOG = "EXPLORER_EVENT_LOG",
  EXPLORER_SUMMARY_LOG = "EXPLORER_SUMMARY_LOG",
  INSTRUMENTATION_OUTPUT = "INSTRUMENTATION_OUTPUT",
  MESSAGE_LOG = "MESSAGE_LOG",
  RESULT_LOG = "RESULT_LOG",
  SCREENSHOT = "SCREENSHOT",
  SERVICE_LOG = "SERVICE_LOG",
  TESTSPEC_OUTPUT = "TESTSPEC_OUTPUT",
  UNKNOWN = "UNKNOWN",
  VIDEO = "VIDEO",
  VIDEO_LOG = "VIDEO_LOG",
  WEBKIT_LOG = "WEBKIT_LOG",
  XCTEST_LOG = "XCTEST_LOG",
}
export interface Artifact {
  arn?: string;
  name?: string;
  type?: ArtifactType | string;
  extension?: string;
  url?: string;
}
export declare enum ArtifactCategory {
  FILE = "FILE",
  LOG = "LOG",
  SCREENSHOT = "SCREENSHOT",
}
export declare enum BillingMethod {
  METERED = "METERED",
  UNMETERED = "UNMETERED",
}
export declare class CannotDeleteException extends __BaseException {
  readonly name: "CannotDeleteException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CannotDeleteException, __BaseException>
  );
}
export interface Counters {
  total?: number;
  passed?: number;
  failed?: number;
  warned?: number;
  errored?: number;
  stopped?: number;
  skipped?: number;
}
export interface CPU {
  frequency?: string;
  architecture?: string;
  clock?: number;
}
export declare enum DeviceAttribute {
  APPIUM_VERSION = "APPIUM_VERSION",
  ARN = "ARN",
  AVAILABILITY = "AVAILABILITY",
  FLEET_TYPE = "FLEET_TYPE",
  FORM_FACTOR = "FORM_FACTOR",
  INSTANCE_ARN = "INSTANCE_ARN",
  INSTANCE_LABELS = "INSTANCE_LABELS",
  MANUFACTURER = "MANUFACTURER",
  MODEL = "MODEL",
  OS_VERSION = "OS_VERSION",
  PLATFORM = "PLATFORM",
  REMOTE_ACCESS_ENABLED = "REMOTE_ACCESS_ENABLED",
  REMOTE_DEBUG_ENABLED = "REMOTE_DEBUG_ENABLED",
}
export declare enum RuleOperator {
  CONTAINS = "CONTAINS",
  EQUALS = "EQUALS",
  GREATER_THAN = "GREATER_THAN",
  GREATER_THAN_OR_EQUALS = "GREATER_THAN_OR_EQUALS",
  IN = "IN",
  LESS_THAN = "LESS_THAN",
  LESS_THAN_OR_EQUALS = "LESS_THAN_OR_EQUALS",
  NOT_IN = "NOT_IN",
}
export interface Rule {
  attribute?: DeviceAttribute | string;
  operator?: RuleOperator | string;
  value?: string;
}
export interface CreateDevicePoolRequest {
  projectArn: string | undefined;
  name: string | undefined;
  description?: string;
  rules: Rule[] | undefined;
  maxDevices?: number;
}
export declare enum DevicePoolType {
  CURATED = "CURATED",
  PRIVATE = "PRIVATE",
}
export interface DevicePool {
  arn?: string;
  name?: string;
  description?: string;
  type?: DevicePoolType | string;
  rules?: Rule[];
  maxDevices?: number;
}
export interface CreateDevicePoolResult {
  devicePool?: DevicePool;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ServiceAccountException extends __BaseException {
  readonly name: "ServiceAccountException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceAccountException, __BaseException>
  );
}
export interface CreateInstanceProfileRequest {
  name: string | undefined;
  description?: string;
  packageCleanup?: boolean;
  excludeAppPackagesFromCleanup?: string[];
  rebootAfterUse?: boolean;
}
export interface InstanceProfile {
  arn?: string;
  packageCleanup?: boolean;
  excludeAppPackagesFromCleanup?: string[];
  rebootAfterUse?: boolean;
  name?: string;
  description?: string;
}
export interface CreateInstanceProfileResult {
  instanceProfile?: InstanceProfile;
}
export declare enum NetworkProfileType {
  CURATED = "CURATED",
  PRIVATE = "PRIVATE",
}
export interface CreateNetworkProfileRequest {
  projectArn: string | undefined;
  name: string | undefined;
  description?: string;
  type?: NetworkProfileType | string;
  uplinkBandwidthBits?: number;
  downlinkBandwidthBits?: number;
  uplinkDelayMs?: number;
  downlinkDelayMs?: number;
  uplinkJitterMs?: number;
  downlinkJitterMs?: number;
  uplinkLossPercent?: number;
  downlinkLossPercent?: number;
}
export interface NetworkProfile {
  arn?: string;
  name?: string;
  description?: string;
  type?: NetworkProfileType | string;
  uplinkBandwidthBits?: number;
  downlinkBandwidthBits?: number;
  uplinkDelayMs?: number;
  downlinkDelayMs?: number;
  uplinkJitterMs?: number;
  downlinkJitterMs?: number;
  uplinkLossPercent?: number;
  downlinkLossPercent?: number;
}
export interface CreateNetworkProfileResult {
  networkProfile?: NetworkProfile;
}
export interface VpcConfig {
  securityGroupIds: string[] | undefined;
  subnetIds: string[] | undefined;
  vpcId: string | undefined;
}
export interface CreateProjectRequest {
  name: string | undefined;
  defaultJobTimeoutMinutes?: number;
  vpcConfig?: VpcConfig;
}
export interface Project {
  arn?: string;
  name?: string;
  defaultJobTimeoutMinutes?: number;
  created?: Date;
  vpcConfig?: VpcConfig;
}
export interface CreateProjectResult {
  project?: Project;
}
export declare class TagOperationException extends __BaseException {
  readonly name: "TagOperationException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TagOperationException, __BaseException>
  );
}
export interface CreateRemoteAccessSessionConfiguration {
  billingMethod?: BillingMethod | string;
  vpceConfigurationArns?: string[];
}
export declare enum InteractionMode {
  INTERACTIVE = "INTERACTIVE",
  NO_VIDEO = "NO_VIDEO",
  VIDEO_ONLY = "VIDEO_ONLY",
}
export interface CreateRemoteAccessSessionRequest {
  projectArn: string | undefined;
  deviceArn: string | undefined;
  instanceArn?: string;
  sshPublicKey?: string;
  remoteDebugEnabled?: boolean;
  remoteRecordEnabled?: boolean;
  remoteRecordAppArn?: string;
  name?: string;
  clientId?: string;
  configuration?: CreateRemoteAccessSessionConfiguration;
  interactionMode?: InteractionMode | string;
  skipAppResign?: boolean;
}
export declare enum DeviceAvailability {
  AVAILABLE = "AVAILABLE",
  BUSY = "BUSY",
  HIGHLY_AVAILABLE = "HIGHLY_AVAILABLE",
  TEMPORARY_NOT_AVAILABLE = "TEMPORARY_NOT_AVAILABLE",
}
export declare enum DeviceFormFactor {
  PHONE = "PHONE",
  TABLET = "TABLET",
}
export declare enum InstanceStatus {
  AVAILABLE = "AVAILABLE",
  IN_USE = "IN_USE",
  NOT_AVAILABLE = "NOT_AVAILABLE",
  PREPARING = "PREPARING",
}
export interface DeviceInstance {
  arn?: string;
  deviceArn?: string;
  labels?: string[];
  status?: InstanceStatus | string;
  udid?: string;
  instanceProfile?: InstanceProfile;
}
export interface Resolution {
  width?: number;
  height?: number;
}
export interface Device {
  arn?: string;
  name?: string;
  manufacturer?: string;
  model?: string;
  modelId?: string;
  formFactor?: DeviceFormFactor | string;
  platform?: DevicePlatform | string;
  os?: string;
  cpu?: CPU;
  resolution?: Resolution;
  heapSize?: number;
  memory?: number;
  image?: string;
  carrier?: string;
  radio?: string;
  remoteAccessEnabled?: boolean;
  remoteDebugEnabled?: boolean;
  fleetType?: string;
  fleetName?: string;
  instances?: DeviceInstance[];
  availability?: DeviceAvailability | string;
}
export interface DeviceMinutes {
  total?: number;
  metered?: number;
  unmetered?: number;
}
export declare enum ExecutionResult {
  ERRORED = "ERRORED",
  FAILED = "FAILED",
  PASSED = "PASSED",
  PENDING = "PENDING",
  SKIPPED = "SKIPPED",
  STOPPED = "STOPPED",
  WARNED = "WARNED",
}
export declare enum ExecutionStatus {
  COMPLETED = "COMPLETED",
  PENDING = "PENDING",
  PENDING_CONCURRNECY = "PENDING_CONCURRENCY",
  PENDING_DEVICE = "PENDING_DEVICE",
  PREPARING = "PREPARING",
  PROCESSING = "PROCESSING",
  RUNNING = "RUNNING",
  SCHEDULING = "SCHEDULING",
  STOPPING = "STOPPING",
}
export interface RemoteAccessSession {
  arn?: string;
  name?: string;
  created?: Date;
  status?: ExecutionStatus | string;
  result?: ExecutionResult | string;
  message?: string;
  started?: Date;
  stopped?: Date;
  device?: Device;
  instanceArn?: string;
  remoteDebugEnabled?: boolean;
  remoteRecordEnabled?: boolean;
  remoteRecordAppArn?: string;
  hostAddress?: string;
  clientId?: string;
  billingMethod?: BillingMethod | string;
  deviceMinutes?: DeviceMinutes;
  endpoint?: string;
  deviceUdid?: string;
  interactionMode?: InteractionMode | string;
  skipAppResign?: boolean;
  vpcConfig?: VpcConfig;
}
export interface CreateRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession;
}
export interface TestGridVpcConfig {
  securityGroupIds: string[] | undefined;
  subnetIds: string[] | undefined;
  vpcId: string | undefined;
}
export interface CreateTestGridProjectRequest {
  name: string | undefined;
  description?: string;
  vpcConfig?: TestGridVpcConfig;
}
export interface TestGridProject {
  arn?: string;
  name?: string;
  description?: string;
  vpcConfig?: TestGridVpcConfig;
  created?: Date;
}
export interface CreateTestGridProjectResult {
  testGridProject?: TestGridProject;
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export interface CreateTestGridUrlRequest {
  projectArn: string | undefined;
  expiresInSeconds: number | undefined;
}
export interface CreateTestGridUrlResult {
  url?: string;
  expires?: Date;
}
export declare enum UploadType {
  ANDROID_APP = "ANDROID_APP",
  APPIUM_JAVA_JUNIT_TEST_PACKAGE = "APPIUM_JAVA_JUNIT_TEST_PACKAGE",
  APPIUM_JAVA_JUNIT_TEST_SPEC = "APPIUM_JAVA_JUNIT_TEST_SPEC",
  APPIUM_JAVA_TESTNG_TEST_PACKAGE = "APPIUM_JAVA_TESTNG_TEST_PACKAGE",
  APPIUM_JAVA_TESTNG_TEST_SPEC = "APPIUM_JAVA_TESTNG_TEST_SPEC",
  APPIUM_NODE_TEST_PACKAGE = "APPIUM_NODE_TEST_PACKAGE",
  APPIUM_NODE_TEST_SPEC = "APPIUM_NODE_TEST_SPEC",
  APPIUM_PYTHON_TEST_PACKAGE = "APPIUM_PYTHON_TEST_PACKAGE",
  APPIUM_PYTHON_TEST_SPEC = "APPIUM_PYTHON_TEST_SPEC",
  APPIUM_RUBY_TEST_PACKAGE = "APPIUM_RUBY_TEST_PACKAGE",
  APPIUM_RUBY_TEST_SPEC = "APPIUM_RUBY_TEST_SPEC",
  APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE",
  APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC",
  APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE",
  APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC",
  APPIUM_WEB_NODE_TEST_PACKAGE = "APPIUM_WEB_NODE_TEST_PACKAGE",
  APPIUM_WEB_NODE_TEST_SPEC = "APPIUM_WEB_NODE_TEST_SPEC",
  APPIUM_WEB_PYTHON_TEST_PACKAGE = "APPIUM_WEB_PYTHON_TEST_PACKAGE",
  APPIUM_WEB_PYTHON_TEST_SPEC = "APPIUM_WEB_PYTHON_TEST_SPEC",
  APPIUM_WEB_RUBY_TEST_PACKAGE = "APPIUM_WEB_RUBY_TEST_PACKAGE",
  APPIUM_WEB_RUBY_TEST_SPEC = "APPIUM_WEB_RUBY_TEST_SPEC",
  CALABASH_TEST_PACKAGE = "CALABASH_TEST_PACKAGE",
  EXTERNAL_DATA = "EXTERNAL_DATA",
  INSTRUMENTATION_TEST_PACKAGE = "INSTRUMENTATION_TEST_PACKAGE",
  INSTRUMENTATION_TEST_SPEC = "INSTRUMENTATION_TEST_SPEC",
  IOS_APP = "IOS_APP",
  UIAUTOMATION_TEST_PACKAGE = "UIAUTOMATION_TEST_PACKAGE",
  UIAUTOMATOR_TEST_PACKAGE = "UIAUTOMATOR_TEST_PACKAGE",
  WEB_APP = "WEB_APP",
  XCTEST_TEST_PACKAGE = "XCTEST_TEST_PACKAGE",
  XCTEST_UI_TEST_PACKAGE = "XCTEST_UI_TEST_PACKAGE",
  XCTEST_UI_TEST_SPEC = "XCTEST_UI_TEST_SPEC",
}
export interface CreateUploadRequest {
  projectArn: string | undefined;
  name: string | undefined;
  type: UploadType | string | undefined;
  contentType?: string;
}
export declare enum UploadCategory {
  CURATED = "CURATED",
  PRIVATE = "PRIVATE",
}
export declare enum UploadStatus {
  FAILED = "FAILED",
  INITIALIZED = "INITIALIZED",
  PROCESSING = "PROCESSING",
  SUCCEEDED = "SUCCEEDED",
}
export interface Upload {
  arn?: string;
  name?: string;
  created?: Date;
  type?: UploadType | string;
  status?: UploadStatus | string;
  url?: string;
  metadata?: string;
  contentType?: string;
  message?: string;
  category?: UploadCategory | string;
}
export interface CreateUploadResult {
  upload?: Upload;
}
export interface CreateVPCEConfigurationRequest {
  vpceConfigurationName: string | undefined;
  vpceServiceName: string | undefined;
  serviceDnsName: string | undefined;
  vpceConfigurationDescription?: string;
}
export interface VPCEConfiguration {
  arn?: string;
  vpceConfigurationName?: string;
  vpceServiceName?: string;
  serviceDnsName?: string;
  vpceConfigurationDescription?: string;
}
export interface CreateVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration;
}
export declare enum CurrencyCode {
  USD = "USD",
}
export interface CustomerArtifactPaths {
  iosPaths?: string[];
  androidPaths?: string[];
  deviceHostPaths?: string[];
}
export interface DeleteDevicePoolRequest {
  arn: string | undefined;
}
export interface DeleteDevicePoolResult {}
export interface DeleteInstanceProfileRequest {
  arn: string | undefined;
}
export interface DeleteInstanceProfileResult {}
export interface DeleteNetworkProfileRequest {
  arn: string | undefined;
}
export interface DeleteNetworkProfileResult {}
export interface DeleteProjectRequest {
  arn: string | undefined;
}
export interface DeleteProjectResult {}
export interface DeleteRemoteAccessSessionRequest {
  arn: string | undefined;
}
export interface DeleteRemoteAccessSessionResult {}
export interface DeleteRunRequest {
  arn: string | undefined;
}
export interface DeleteRunResult {}
export interface DeleteTestGridProjectRequest {
  projectArn: string | undefined;
}
export interface DeleteTestGridProjectResult {}
export interface DeleteUploadRequest {
  arn: string | undefined;
}
export interface DeleteUploadResult {}
export interface DeleteVPCEConfigurationRequest {
  arn: string | undefined;
}
export interface DeleteVPCEConfigurationResult {}
export declare class InvalidOperationException extends __BaseException {
  readonly name: "InvalidOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidOperationException, __BaseException>
  );
}
export interface GetAccountSettingsRequest {}
export interface GetAccountSettingsResult {
  accountSettings?: AccountSettings;
}
export interface GetDeviceRequest {
  arn: string | undefined;
}
export interface GetDeviceResult {
  device?: Device;
}
export interface GetDeviceInstanceRequest {
  arn: string | undefined;
}
export interface GetDeviceInstanceResult {
  deviceInstance?: DeviceInstance;
}
export interface GetDevicePoolRequest {
  arn: string | undefined;
}
export interface GetDevicePoolResult {
  devicePool?: DevicePool;
}
export interface Location {
  latitude: number | undefined;
  longitude: number | undefined;
}
export interface Radios {
  wifi?: boolean;
  bluetooth?: boolean;
  nfc?: boolean;
  gps?: boolean;
}
export interface ScheduleRunConfiguration {
  extraDataPackageArn?: string;
  networkProfileArn?: string;
  locale?: string;
  location?: Location;
  vpceConfigurationArns?: string[];
  customerArtifactPaths?: CustomerArtifactPaths;
  radios?: Radios;
  auxiliaryApps?: string[];
  billingMethod?: BillingMethod | string;
}
export declare enum TestType {
  APPIUM_JAVA_JUNIT = "APPIUM_JAVA_JUNIT",
  APPIUM_JAVA_TESTNG = "APPIUM_JAVA_TESTNG",
  APPIUM_NODE = "APPIUM_NODE",
  APPIUM_PYTHON = "APPIUM_PYTHON",
  APPIUM_RUBY = "APPIUM_RUBY",
  APPIUM_WEB_JAVA_JUNIT = "APPIUM_WEB_JAVA_JUNIT",
  APPIUM_WEB_JAVA_TESTNG = "APPIUM_WEB_JAVA_TESTNG",
  APPIUM_WEB_NODE = "APPIUM_WEB_NODE",
  APPIUM_WEB_PYTHON = "APPIUM_WEB_PYTHON",
  APPIUM_WEB_RUBY = "APPIUM_WEB_RUBY",
  BUILTIN_EXPLORER = "BUILTIN_EXPLORER",
  BUILTIN_FUZZ = "BUILTIN_FUZZ",
  CALABASH = "CALABASH",
  INSTRUMENTATION = "INSTRUMENTATION",
  REMOTE_ACCESS_RECORD = "REMOTE_ACCESS_RECORD",
  REMOTE_ACCESS_REPLAY = "REMOTE_ACCESS_REPLAY",
  UIAUTOMATION = "UIAUTOMATION",
  UIAUTOMATOR = "UIAUTOMATOR",
  WEB_PERFORMANCE_PROFILE = "WEB_PERFORMANCE_PROFILE",
  XCTEST = "XCTEST",
  XCTEST_UI = "XCTEST_UI",
}
export interface ScheduleRunTest {
  type: TestType | string | undefined;
  testPackageArn?: string;
  testSpecArn?: string;
  filter?: string;
  parameters?: Record<string, string>;
}
export interface GetDevicePoolCompatibilityRequest {
  devicePoolArn: string | undefined;
  appArn?: string;
  testType?: TestType | string;
  test?: ScheduleRunTest;
  configuration?: ScheduleRunConfiguration;
}
export interface IncompatibilityMessage {
  message?: string;
  type?: DeviceAttribute | string;
}
export interface DevicePoolCompatibilityResult {
  device?: Device;
  compatible?: boolean;
  incompatibilityMessages?: IncompatibilityMessage[];
}
export interface GetDevicePoolCompatibilityResult {
  compatibleDevices?: DevicePoolCompatibilityResult[];
  incompatibleDevices?: DevicePoolCompatibilityResult[];
}
export interface GetInstanceProfileRequest {
  arn: string | undefined;
}
export interface GetInstanceProfileResult {
  instanceProfile?: InstanceProfile;
}
export interface GetJobRequest {
  arn: string | undefined;
}
export interface Job {
  arn?: string;
  name?: string;
  type?: TestType | string;
  created?: Date;
  status?: ExecutionStatus | string;
  result?: ExecutionResult | string;
  started?: Date;
  stopped?: Date;
  counters?: Counters;
  message?: string;
  device?: Device;
  instanceArn?: string;
  deviceMinutes?: DeviceMinutes;
  videoEndpoint?: string;
  videoCapture?: boolean;
}
export interface GetJobResult {
  job?: Job;
}
export interface GetNetworkProfileRequest {
  arn: string | undefined;
}
export interface GetNetworkProfileResult {
  networkProfile?: NetworkProfile;
}
export interface GetOfferingStatusRequest {
  nextToken?: string;
}
export interface MonetaryAmount {
  amount?: number;
  currencyCode?: CurrencyCode | string;
}
export declare enum RecurringChargeFrequency {
  MONTHLY = "MONTHLY",
}
export interface RecurringCharge {
  cost?: MonetaryAmount;
  frequency?: RecurringChargeFrequency | string;
}
export declare enum OfferingType {
  RECURRING = "RECURRING",
}
export interface Offering {
  id?: string;
  description?: string;
  type?: OfferingType | string;
  platform?: DevicePlatform | string;
  recurringCharges?: RecurringCharge[];
}
export declare enum OfferingTransactionType {
  PURCHASE = "PURCHASE",
  RENEW = "RENEW",
  SYSTEM = "SYSTEM",
}
export interface OfferingStatus {
  type?: OfferingTransactionType | string;
  offering?: Offering;
  quantity?: number;
  effectiveOn?: Date;
}
export interface GetOfferingStatusResult {
  current?: Record<string, OfferingStatus>;
  nextPeriod?: Record<string, OfferingStatus>;
  nextToken?: string;
}
export declare class NotEligibleException extends __BaseException {
  readonly name: "NotEligibleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NotEligibleException, __BaseException>
  );
}
export interface GetProjectRequest {
  arn: string | undefined;
}
export interface GetProjectResult {
  project?: Project;
}
export interface GetRemoteAccessSessionRequest {
  arn: string | undefined;
}
export interface GetRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession;
}
export interface GetRunRequest {
  arn: string | undefined;
}
export declare enum DeviceFilterAttribute {
  ARN = "ARN",
  AVAILABILITY = "AVAILABILITY",
  FLEET_TYPE = "FLEET_TYPE",
  FORM_FACTOR = "FORM_FACTOR",
  INSTANCE_ARN = "INSTANCE_ARN",
  INSTANCE_LABELS = "INSTANCE_LABELS",
  MANUFACTURER = "MANUFACTURER",
  MODEL = "MODEL",
  OS_VERSION = "OS_VERSION",
  PLATFORM = "PLATFORM",
  REMOTE_ACCESS_ENABLED = "REMOTE_ACCESS_ENABLED",
  REMOTE_DEBUG_ENABLED = "REMOTE_DEBUG_ENABLED",
}
export interface DeviceFilter {
  attribute: DeviceFilterAttribute | string | undefined;
  operator: RuleOperator | string | undefined;
  values: string[] | undefined;
}
export interface DeviceSelectionResult {
  filters?: DeviceFilter[];
  matchedDevicesCount?: number;
  maxDevices?: number;
}
export declare enum ExecutionResultCode {
  PARSING_FAILED = "PARSING_FAILED",
  VPC_ENDPOINT_SETUP_FAILED = "VPC_ENDPOINT_SETUP_FAILED",
}
export interface Run {
  arn?: string;
  name?: string;
  type?: TestType | string;
  platform?: DevicePlatform | string;
  created?: Date;
  status?: ExecutionStatus | string;
  result?: ExecutionResult | string;
  started?: Date;
  stopped?: Date;
  counters?: Counters;
  message?: string;
  totalJobs?: number;
  completedJobs?: number;
  billingMethod?: BillingMethod | string;
  deviceMinutes?: DeviceMinutes;
  networkProfile?: NetworkProfile;
  parsingResultUrl?: string;
  resultCode?: ExecutionResultCode | string;
  seed?: number;
  appUpload?: string;
  eventCount?: number;
  jobTimeoutMinutes?: number;
  devicePoolArn?: string;
  locale?: string;
  radios?: Radios;
  location?: Location;
  customerArtifactPaths?: CustomerArtifactPaths;
  webUrl?: string;
  skipAppResign?: boolean;
  testSpecArn?: string;
  deviceSelectionResult?: DeviceSelectionResult;
  vpcConfig?: VpcConfig;
}
export interface GetRunResult {
  run?: Run;
}
export interface GetSuiteRequest {
  arn: string | undefined;
}
export interface Suite {
  arn?: string;
  name?: string;
  type?: TestType | string;
  created?: Date;
  status?: ExecutionStatus | string;
  result?: ExecutionResult | string;
  started?: Date;
  stopped?: Date;
  counters?: Counters;
  message?: string;
  deviceMinutes?: DeviceMinutes;
}
export interface GetSuiteResult {
  suite?: Suite;
}
export interface GetTestRequest {
  arn: string | undefined;
}
export interface Test {
  arn?: string;
  name?: string;
  type?: TestType | string;
  created?: Date;
  status?: ExecutionStatus | string;
  result?: ExecutionResult | string;
  started?: Date;
  stopped?: Date;
  counters?: Counters;
  message?: string;
  deviceMinutes?: DeviceMinutes;
}
export interface GetTestResult {
  test?: Test;
}
export interface GetTestGridProjectRequest {
  projectArn: string | undefined;
}
export interface GetTestGridProjectResult {
  testGridProject?: TestGridProject;
}
export interface GetTestGridSessionRequest {
  projectArn?: string;
  sessionId?: string;
  sessionArn?: string;
}
export declare enum TestGridSessionStatus {
  ACTIVE = "ACTIVE",
  CLOSED = "CLOSED",
  ERRORED = "ERRORED",
}
export interface TestGridSession {
  arn?: string;
  status?: TestGridSessionStatus | string;
  created?: Date;
  ended?: Date;
  billingMinutes?: number;
  seleniumProperties?: string;
}
export interface GetTestGridSessionResult {
  testGridSession?: TestGridSession;
}
export interface GetUploadRequest {
  arn: string | undefined;
}
export interface GetUploadResult {
  upload?: Upload;
}
export interface GetVPCEConfigurationRequest {
  arn: string | undefined;
}
export interface GetVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration;
}
export interface InstallToRemoteAccessSessionRequest {
  remoteAccessSessionArn: string | undefined;
  appArn: string | undefined;
}
export interface InstallToRemoteAccessSessionResult {
  appUpload?: Upload;
}
export interface ListArtifactsRequest {
  arn: string | undefined;
  type: ArtifactCategory | string | undefined;
  nextToken?: string;
}
export interface ListArtifactsResult {
  artifacts?: Artifact[];
  nextToken?: string;
}
export interface ListDeviceInstancesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListDeviceInstancesResult {
  deviceInstances?: DeviceInstance[];
  nextToken?: string;
}
export interface ListDevicePoolsRequest {
  arn: string | undefined;
  type?: DevicePoolType | string;
  nextToken?: string;
}
export interface ListDevicePoolsResult {
  devicePools?: DevicePool[];
  nextToken?: string;
}
export interface ListDevicesRequest {
  arn?: string;
  nextToken?: string;
  filters?: DeviceFilter[];
}
export interface ListDevicesResult {
  devices?: Device[];
  nextToken?: string;
}
export interface ListInstanceProfilesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListInstanceProfilesResult {
  instanceProfiles?: InstanceProfile[];
  nextToken?: string;
}
export interface ListJobsRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ListJobsResult {
  jobs?: Job[];
  nextToken?: string;
}
export interface ListNetworkProfilesRequest {
  arn: string | undefined;
  type?: NetworkProfileType | string;
  nextToken?: string;
}
export interface ListNetworkProfilesResult {
  networkProfiles?: NetworkProfile[];
  nextToken?: string;
}
export interface ListOfferingPromotionsRequest {
  nextToken?: string;
}
export interface OfferingPromotion {
  id?: string;
  description?: string;
}
export interface ListOfferingPromotionsResult {
  offeringPromotions?: OfferingPromotion[];
  nextToken?: string;
}
export interface ListOfferingsRequest {
  nextToken?: string;
}
export interface ListOfferingsResult {
  offerings?: Offering[];
  nextToken?: string;
}
export interface ListOfferingTransactionsRequest {
  nextToken?: string;
}
export interface OfferingTransaction {
  offeringStatus?: OfferingStatus;
  transactionId?: string;
  offeringPromotionId?: string;
  createdOn?: Date;
  cost?: MonetaryAmount;
}
export interface ListOfferingTransactionsResult {
  offeringTransactions?: OfferingTransaction[];
  nextToken?: string;
}
export interface ListProjectsRequest {
  arn?: string;
  nextToken?: string;
}
export interface ListProjectsResult {
  projects?: Project[];
  nextToken?: string;
}
export interface ListRemoteAccessSessionsRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ListRemoteAccessSessionsResult {
  remoteAccessSessions?: RemoteAccessSession[];
  nextToken?: string;
}
export interface ListRunsRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ListRunsResult {
  runs?: Run[];
  nextToken?: string;
}
export interface ListSamplesRequest {
  arn: string | undefined;
  nextToken?: string;
}
export declare enum SampleType {
  CPU = "CPU",
  MEMORY = "MEMORY",
  NATIVE_AVG_DRAWTIME = "NATIVE_AVG_DRAWTIME",
  NATIVE_FPS = "NATIVE_FPS",
  NATIVE_FRAMES = "NATIVE_FRAMES",
  NATIVE_MAX_DRAWTIME = "NATIVE_MAX_DRAWTIME",
  NATIVE_MIN_DRAWTIME = "NATIVE_MIN_DRAWTIME",
  OPENGL_AVG_DRAWTIME = "OPENGL_AVG_DRAWTIME",
  OPENGL_FPS = "OPENGL_FPS",
  OPENGL_FRAMES = "OPENGL_FRAMES",
  OPENGL_MAX_DRAWTIME = "OPENGL_MAX_DRAWTIME",
  OPENGL_MIN_DRAWTIME = "OPENGL_MIN_DRAWTIME",
  RX = "RX",
  RX_RATE = "RX_RATE",
  THREADS = "THREADS",
  TX = "TX",
  TX_RATE = "TX_RATE",
}
export interface Sample {
  arn?: string;
  type?: SampleType | string;
  url?: string;
}
export interface ListSamplesResult {
  samples?: Sample[];
  nextToken?: string;
}
export interface ListSuitesRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ListSuitesResult {
  suites?: Suite[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface ListTestGridProjectsRequest {
  maxResult?: number;
  nextToken?: string;
}
export interface ListTestGridProjectsResult {
  testGridProjects?: TestGridProject[];
  nextToken?: string;
}
export interface ListTestGridSessionActionsRequest {
  sessionArn: string | undefined;
  maxResult?: number;
  nextToken?: string;
}
export interface TestGridSessionAction {
  action?: string;
  started?: Date;
  duration?: number;
  statusCode?: string;
  requestMethod?: string;
}
export interface ListTestGridSessionActionsResult {
  actions?: TestGridSessionAction[];
  nextToken?: string;
}
export declare enum TestGridSessionArtifactCategory {
  LOG = "LOG",
  VIDEO = "VIDEO",
}
export interface ListTestGridSessionArtifactsRequest {
  sessionArn: string | undefined;
  type?: TestGridSessionArtifactCategory | string;
  maxResult?: number;
  nextToken?: string;
}
export declare enum TestGridSessionArtifactType {
  SELENIUM_LOG = "SELENIUM_LOG",
  UNKNOWN = "UNKNOWN",
  VIDEO = "VIDEO",
}
export interface TestGridSessionArtifact {
  filename?: string;
  type?: TestGridSessionArtifactType | string;
  url?: string;
}
export interface ListTestGridSessionArtifactsResult {
  artifacts?: TestGridSessionArtifact[];
  nextToken?: string;
}
export interface ListTestGridSessionsRequest {
  projectArn: string | undefined;
  status?: TestGridSessionStatus | string;
  creationTimeAfter?: Date;
  creationTimeBefore?: Date;
  endTimeAfter?: Date;
  endTimeBefore?: Date;
  maxResult?: number;
  nextToken?: string;
}
export interface ListTestGridSessionsResult {
  testGridSessions?: TestGridSession[];
  nextToken?: string;
}
export interface ListTestsRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ListTestsResult {
  tests?: Test[];
  nextToken?: string;
}
export interface ListUniqueProblemsRequest {
  arn: string | undefined;
  nextToken?: string;
}
export interface ProblemDetail {
  arn?: string;
  name?: string;
}
export interface Problem {
  run?: ProblemDetail;
  job?: ProblemDetail;
  suite?: ProblemDetail;
  test?: ProblemDetail;
  device?: Device;
  result?: ExecutionResult | string;
  message?: string;
}
export interface UniqueProblem {
  message?: string;
  problems?: Problem[];
}
export interface ListUniqueProblemsResult {
  uniqueProblems?: Record<string, UniqueProblem[]>;
  nextToken?: string;
}
export interface ListUploadsRequest {
  arn: string | undefined;
  type?: UploadType | string;
  nextToken?: string;
}
export interface ListUploadsResult {
  uploads?: Upload[];
  nextToken?: string;
}
export interface ListVPCEConfigurationsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListVPCEConfigurationsResult {
  vpceConfigurations?: VPCEConfiguration[];
  nextToken?: string;
}
export interface PurchaseOfferingRequest {
  offeringId: string | undefined;
  quantity: number | undefined;
  offeringPromotionId?: string;
}
export interface PurchaseOfferingResult {
  offeringTransaction?: OfferingTransaction;
}
export interface RenewOfferingRequest {
  offeringId: string | undefined;
  quantity: number | undefined;
}
export interface RenewOfferingResult {
  offeringTransaction?: OfferingTransaction;
}
export declare class IdempotencyException extends __BaseException {
  readonly name: "IdempotencyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IdempotencyException, __BaseException>
  );
}
export interface DeviceSelectionConfiguration {
  filters: DeviceFilter[] | undefined;
  maxDevices: number | undefined;
}
export interface ExecutionConfiguration {
  jobTimeoutMinutes?: number;
  accountsCleanup?: boolean;
  appPackagesCleanup?: boolean;
  videoCapture?: boolean;
  skipAppResign?: boolean;
}
export interface ScheduleRunRequest {
  projectArn: string | undefined;
  appArn?: string;
  devicePoolArn?: string;
  deviceSelectionConfiguration?: DeviceSelectionConfiguration;
  name?: string;
  test: ScheduleRunTest | undefined;
  configuration?: ScheduleRunConfiguration;
  executionConfiguration?: ExecutionConfiguration;
}
export interface ScheduleRunResult {
  run?: Run;
}
export interface StopJobRequest {
  arn: string | undefined;
}
export interface StopJobResult {
  job?: Job;
}
export interface StopRemoteAccessSessionRequest {
  arn: string | undefined;
}
export interface StopRemoteAccessSessionResult {
  remoteAccessSession?: RemoteAccessSession;
}
export interface StopRunRequest {
  arn: string | undefined;
}
export interface StopRunResult {
  run?: Run;
}
export declare class TagPolicyException extends __BaseException {
  readonly name: "TagPolicyException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(opts: __ExceptionOptionType<TagPolicyException, __BaseException>);
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDeviceInstanceRequest {
  arn: string | undefined;
  profileArn?: string;
  labels?: string[];
}
export interface UpdateDeviceInstanceResult {
  deviceInstance?: DeviceInstance;
}
export interface UpdateDevicePoolRequest {
  arn: string | undefined;
  name?: string;
  description?: string;
  rules?: Rule[];
  maxDevices?: number;
  clearMaxDevices?: boolean;
}
export interface UpdateDevicePoolResult {
  devicePool?: DevicePool;
}
export interface UpdateInstanceProfileRequest {
  arn: string | undefined;
  name?: string;
  description?: string;
  packageCleanup?: boolean;
  excludeAppPackagesFromCleanup?: string[];
  rebootAfterUse?: boolean;
}
export interface UpdateInstanceProfileResult {
  instanceProfile?: InstanceProfile;
}
export interface UpdateNetworkProfileRequest {
  arn: string | undefined;
  name?: string;
  description?: string;
  type?: NetworkProfileType | string;
  uplinkBandwidthBits?: number;
  downlinkBandwidthBits?: number;
  uplinkDelayMs?: number;
  downlinkDelayMs?: number;
  uplinkJitterMs?: number;
  downlinkJitterMs?: number;
  uplinkLossPercent?: number;
  downlinkLossPercent?: number;
}
export interface UpdateNetworkProfileResult {
  networkProfile?: NetworkProfile;
}
export interface UpdateProjectRequest {
  arn: string | undefined;
  name?: string;
  defaultJobTimeoutMinutes?: number;
  vpcConfig?: VpcConfig;
}
export interface UpdateProjectResult {
  project?: Project;
}
export interface UpdateTestGridProjectRequest {
  projectArn: string | undefined;
  name?: string;
  description?: string;
  vpcConfig?: TestGridVpcConfig;
}
export interface UpdateTestGridProjectResult {
  testGridProject?: TestGridProject;
}
export interface UpdateUploadRequest {
  arn: string | undefined;
  name?: string;
  contentType?: string;
  editContent?: boolean;
}
export interface UpdateUploadResult {
  upload?: Upload;
}
export interface UpdateVPCEConfigurationRequest {
  arn: string | undefined;
  vpceConfigurationName?: string;
  vpceServiceName?: string;
  serviceDnsName?: string;
  vpceConfigurationDescription?: string;
}
export interface UpdateVPCEConfigurationResult {
  vpceConfiguration?: VPCEConfiguration;
}
export declare const TrialMinutesFilterSensitiveLog: (obj: TrialMinutes) => any;
export declare const AccountSettingsFilterSensitiveLog: (
  obj: AccountSettings
) => any;
export declare const ArtifactFilterSensitiveLog: (obj: Artifact) => any;
export declare const CountersFilterSensitiveLog: (obj: Counters) => any;
export declare const CPUFilterSensitiveLog: (obj: CPU) => any;
export declare const RuleFilterSensitiveLog: (obj: Rule) => any;
export declare const CreateDevicePoolRequestFilterSensitiveLog: (
  obj: CreateDevicePoolRequest
) => any;
export declare const DevicePoolFilterSensitiveLog: (obj: DevicePool) => any;
export declare const CreateDevicePoolResultFilterSensitiveLog: (
  obj: CreateDevicePoolResult
) => any;
export declare const CreateInstanceProfileRequestFilterSensitiveLog: (
  obj: CreateInstanceProfileRequest
) => any;
export declare const InstanceProfileFilterSensitiveLog: (
  obj: InstanceProfile
) => any;
export declare const CreateInstanceProfileResultFilterSensitiveLog: (
  obj: CreateInstanceProfileResult
) => any;
export declare const CreateNetworkProfileRequestFilterSensitiveLog: (
  obj: CreateNetworkProfileRequest
) => any;
export declare const NetworkProfileFilterSensitiveLog: (
  obj: NetworkProfile
) => any;
export declare const CreateNetworkProfileResultFilterSensitiveLog: (
  obj: CreateNetworkProfileResult
) => any;
export declare const VpcConfigFilterSensitiveLog: (obj: VpcConfig) => any;
export declare const CreateProjectRequestFilterSensitiveLog: (
  obj: CreateProjectRequest
) => any;
export declare const ProjectFilterSensitiveLog: (obj: Project) => any;
export declare const CreateProjectResultFilterSensitiveLog: (
  obj: CreateProjectResult
) => any;
export declare const CreateRemoteAccessSessionConfigurationFilterSensitiveLog: (
  obj: CreateRemoteAccessSessionConfiguration
) => any;
export declare const CreateRemoteAccessSessionRequestFilterSensitiveLog: (
  obj: CreateRemoteAccessSessionRequest
) => any;
export declare const DeviceInstanceFilterSensitiveLog: (
  obj: DeviceInstance
) => any;
export declare const ResolutionFilterSensitiveLog: (obj: Resolution) => any;
export declare const DeviceFilterSensitiveLog: (obj: Device) => any;
export declare const DeviceMinutesFilterSensitiveLog: (
  obj: DeviceMinutes
) => any;
export declare const RemoteAccessSessionFilterSensitiveLog: (
  obj: RemoteAccessSession
) => any;
export declare const CreateRemoteAccessSessionResultFilterSensitiveLog: (
  obj: CreateRemoteAccessSessionResult
) => any;
export declare const TestGridVpcConfigFilterSensitiveLog: (
  obj: TestGridVpcConfig
) => any;
export declare const CreateTestGridProjectRequestFilterSensitiveLog: (
  obj: CreateTestGridProjectRequest
) => any;
export declare const TestGridProjectFilterSensitiveLog: (
  obj: TestGridProject
) => any;
export declare const CreateTestGridProjectResultFilterSensitiveLog: (
  obj: CreateTestGridProjectResult
) => any;
export declare const CreateTestGridUrlRequestFilterSensitiveLog: (
  obj: CreateTestGridUrlRequest
) => any;
export declare const CreateTestGridUrlResultFilterSensitiveLog: (
  obj: CreateTestGridUrlResult
) => any;
export declare const CreateUploadRequestFilterSensitiveLog: (
  obj: CreateUploadRequest
) => any;
export declare const UploadFilterSensitiveLog: (obj: Upload) => any;
export declare const CreateUploadResultFilterSensitiveLog: (
  obj: CreateUploadResult
) => any;
export declare const CreateVPCEConfigurationRequestFilterSensitiveLog: (
  obj: CreateVPCEConfigurationRequest
) => any;
export declare const VPCEConfigurationFilterSensitiveLog: (
  obj: VPCEConfiguration
) => any;
export declare const CreateVPCEConfigurationResultFilterSensitiveLog: (
  obj: CreateVPCEConfigurationResult
) => any;
export declare const CustomerArtifactPathsFilterSensitiveLog: (
  obj: CustomerArtifactPaths
) => any;
export declare const DeleteDevicePoolRequestFilterSensitiveLog: (
  obj: DeleteDevicePoolRequest
) => any;
export declare const DeleteDevicePoolResultFilterSensitiveLog: (
  obj: DeleteDevicePoolResult
) => any;
export declare const DeleteInstanceProfileRequestFilterSensitiveLog: (
  obj: DeleteInstanceProfileRequest
) => any;
export declare const DeleteInstanceProfileResultFilterSensitiveLog: (
  obj: DeleteInstanceProfileResult
) => any;
export declare const DeleteNetworkProfileRequestFilterSensitiveLog: (
  obj: DeleteNetworkProfileRequest
) => any;
export declare const DeleteNetworkProfileResultFilterSensitiveLog: (
  obj: DeleteNetworkProfileResult
) => any;
export declare const DeleteProjectRequestFilterSensitiveLog: (
  obj: DeleteProjectRequest
) => any;
export declare const DeleteProjectResultFilterSensitiveLog: (
  obj: DeleteProjectResult
) => any;
export declare const DeleteRemoteAccessSessionRequestFilterSensitiveLog: (
  obj: DeleteRemoteAccessSessionRequest
) => any;
export declare const DeleteRemoteAccessSessionResultFilterSensitiveLog: (
  obj: DeleteRemoteAccessSessionResult
) => any;
export declare const DeleteRunRequestFilterSensitiveLog: (
  obj: DeleteRunRequest
) => any;
export declare const DeleteRunResultFilterSensitiveLog: (
  obj: DeleteRunResult
) => any;
export declare const DeleteTestGridProjectRequestFilterSensitiveLog: (
  obj: DeleteTestGridProjectRequest
) => any;
export declare const DeleteTestGridProjectResultFilterSensitiveLog: (
  obj: DeleteTestGridProjectResult
) => any;
export declare const DeleteUploadRequestFilterSensitiveLog: (
  obj: DeleteUploadRequest
) => any;
export declare const DeleteUploadResultFilterSensitiveLog: (
  obj: DeleteUploadResult
) => any;
export declare const DeleteVPCEConfigurationRequestFilterSensitiveLog: (
  obj: DeleteVPCEConfigurationRequest
) => any;
export declare const DeleteVPCEConfigurationResultFilterSensitiveLog: (
  obj: DeleteVPCEConfigurationResult
) => any;
export declare const GetAccountSettingsRequestFilterSensitiveLog: (
  obj: GetAccountSettingsRequest
) => any;
export declare const GetAccountSettingsResultFilterSensitiveLog: (
  obj: GetAccountSettingsResult
) => any;
export declare const GetDeviceRequestFilterSensitiveLog: (
  obj: GetDeviceRequest
) => any;
export declare const GetDeviceResultFilterSensitiveLog: (
  obj: GetDeviceResult
) => any;
export declare const GetDeviceInstanceRequestFilterSensitiveLog: (
  obj: GetDeviceInstanceRequest
) => any;
export declare const GetDeviceInstanceResultFilterSensitiveLog: (
  obj: GetDeviceInstanceResult
) => any;
export declare const GetDevicePoolRequestFilterSensitiveLog: (
  obj: GetDevicePoolRequest
) => any;
export declare const GetDevicePoolResultFilterSensitiveLog: (
  obj: GetDevicePoolResult
) => any;
export declare const LocationFilterSensitiveLog: (obj: Location) => any;
export declare const RadiosFilterSensitiveLog: (obj: Radios) => any;
export declare const ScheduleRunConfigurationFilterSensitiveLog: (
  obj: ScheduleRunConfiguration
) => any;
export declare const ScheduleRunTestFilterSensitiveLog: (
  obj: ScheduleRunTest
) => any;
export declare const GetDevicePoolCompatibilityRequestFilterSensitiveLog: (
  obj: GetDevicePoolCompatibilityRequest
) => any;
export declare const IncompatibilityMessageFilterSensitiveLog: (
  obj: IncompatibilityMessage
) => any;
export declare const DevicePoolCompatibilityResultFilterSensitiveLog: (
  obj: DevicePoolCompatibilityResult
) => any;
export declare const GetDevicePoolCompatibilityResultFilterSensitiveLog: (
  obj: GetDevicePoolCompatibilityResult
) => any;
export declare const GetInstanceProfileRequestFilterSensitiveLog: (
  obj: GetInstanceProfileRequest
) => any;
export declare const GetInstanceProfileResultFilterSensitiveLog: (
  obj: GetInstanceProfileResult
) => any;
export declare const GetJobRequestFilterSensitiveLog: (
  obj: GetJobRequest
) => any;
export declare const JobFilterSensitiveLog: (obj: Job) => any;
export declare const GetJobResultFilterSensitiveLog: (obj: GetJobResult) => any;
export declare const GetNetworkProfileRequestFilterSensitiveLog: (
  obj: GetNetworkProfileRequest
) => any;
export declare const GetNetworkProfileResultFilterSensitiveLog: (
  obj: GetNetworkProfileResult
) => any;
export declare const GetOfferingStatusRequestFilterSensitiveLog: (
  obj: GetOfferingStatusRequest
) => any;
export declare const MonetaryAmountFilterSensitiveLog: (
  obj: MonetaryAmount
) => any;
export declare const RecurringChargeFilterSensitiveLog: (
  obj: RecurringCharge
) => any;
export declare const OfferingFilterSensitiveLog: (obj: Offering) => any;
export declare const OfferingStatusFilterSensitiveLog: (
  obj: OfferingStatus
) => any;
export declare const GetOfferingStatusResultFilterSensitiveLog: (
  obj: GetOfferingStatusResult
) => any;
export declare const GetProjectRequestFilterSensitiveLog: (
  obj: GetProjectRequest
) => any;
export declare const GetProjectResultFilterSensitiveLog: (
  obj: GetProjectResult
) => any;
export declare const GetRemoteAccessSessionRequestFilterSensitiveLog: (
  obj: GetRemoteAccessSessionRequest
) => any;
export declare const GetRemoteAccessSessionResultFilterSensitiveLog: (
  obj: GetRemoteAccessSessionResult
) => any;
export declare const GetRunRequestFilterSensitiveLog: (
  obj: GetRunRequest
) => any;
export declare const DeviceFilterFilterSensitiveLog: (obj: DeviceFilter) => any;
export declare const DeviceSelectionResultFilterSensitiveLog: (
  obj: DeviceSelectionResult
) => any;
export declare const RunFilterSensitiveLog: (obj: Run) => any;
export declare const GetRunResultFilterSensitiveLog: (obj: GetRunResult) => any;
export declare const GetSuiteRequestFilterSensitiveLog: (
  obj: GetSuiteRequest
) => any;
export declare const SuiteFilterSensitiveLog: (obj: Suite) => any;
export declare const GetSuiteResultFilterSensitiveLog: (
  obj: GetSuiteResult
) => any;
export declare const GetTestRequestFilterSensitiveLog: (
  obj: GetTestRequest
) => any;
export declare const TestFilterSensitiveLog: (obj: Test) => any;
export declare const GetTestResultFilterSensitiveLog: (
  obj: GetTestResult
) => any;
export declare const GetTestGridProjectRequestFilterSensitiveLog: (
  obj: GetTestGridProjectRequest
) => any;
export declare const GetTestGridProjectResultFilterSensitiveLog: (
  obj: GetTestGridProjectResult
) => any;
export declare const GetTestGridSessionRequestFilterSensitiveLog: (
  obj: GetTestGridSessionRequest
) => any;
export declare const TestGridSessionFilterSensitiveLog: (
  obj: TestGridSession
) => any;
export declare const GetTestGridSessionResultFilterSensitiveLog: (
  obj: GetTestGridSessionResult
) => any;
export declare const GetUploadRequestFilterSensitiveLog: (
  obj: GetUploadRequest
) => any;
export declare const GetUploadResultFilterSensitiveLog: (
  obj: GetUploadResult
) => any;
export declare const GetVPCEConfigurationRequestFilterSensitiveLog: (
  obj: GetVPCEConfigurationRequest
) => any;
export declare const GetVPCEConfigurationResultFilterSensitiveLog: (
  obj: GetVPCEConfigurationResult
) => any;
export declare const InstallToRemoteAccessSessionRequestFilterSensitiveLog: (
  obj: InstallToRemoteAccessSessionRequest
) => any;
export declare const InstallToRemoteAccessSessionResultFilterSensitiveLog: (
  obj: InstallToRemoteAccessSessionResult
) => any;
export declare const ListArtifactsRequestFilterSensitiveLog: (
  obj: ListArtifactsRequest
) => any;
export declare const ListArtifactsResultFilterSensitiveLog: (
  obj: ListArtifactsResult
) => any;
export declare const ListDeviceInstancesRequestFilterSensitiveLog: (
  obj: ListDeviceInstancesRequest
) => any;
export declare const ListDeviceInstancesResultFilterSensitiveLog: (
  obj: ListDeviceInstancesResult
) => any;
export declare const ListDevicePoolsRequestFilterSensitiveLog: (
  obj: ListDevicePoolsRequest
) => any;
export declare const ListDevicePoolsResultFilterSensitiveLog: (
  obj: ListDevicePoolsResult
) => any;
export declare const ListDevicesRequestFilterSensitiveLog: (
  obj: ListDevicesRequest
) => any;
export declare const ListDevicesResultFilterSensitiveLog: (
  obj: ListDevicesResult
) => any;
export declare const ListInstanceProfilesRequestFilterSensitiveLog: (
  obj: ListInstanceProfilesRequest
) => any;
export declare const ListInstanceProfilesResultFilterSensitiveLog: (
  obj: ListInstanceProfilesResult
) => any;
export declare const ListJobsRequestFilterSensitiveLog: (
  obj: ListJobsRequest
) => any;
export declare const ListJobsResultFilterSensitiveLog: (
  obj: ListJobsResult
) => any;
export declare const ListNetworkProfilesRequestFilterSensitiveLog: (
  obj: ListNetworkProfilesRequest
) => any;
export declare const ListNetworkProfilesResultFilterSensitiveLog: (
  obj: ListNetworkProfilesResult
) => any;
export declare const ListOfferingPromotionsRequestFilterSensitiveLog: (
  obj: ListOfferingPromotionsRequest
) => any;
export declare const OfferingPromotionFilterSensitiveLog: (
  obj: OfferingPromotion
) => any;
export declare const ListOfferingPromotionsResultFilterSensitiveLog: (
  obj: ListOfferingPromotionsResult
) => any;
export declare const ListOfferingsRequestFilterSensitiveLog: (
  obj: ListOfferingsRequest
) => any;
export declare const ListOfferingsResultFilterSensitiveLog: (
  obj: ListOfferingsResult
) => any;
export declare const ListOfferingTransactionsRequestFilterSensitiveLog: (
  obj: ListOfferingTransactionsRequest
) => any;
export declare const OfferingTransactionFilterSensitiveLog: (
  obj: OfferingTransaction
) => any;
export declare const ListOfferingTransactionsResultFilterSensitiveLog: (
  obj: ListOfferingTransactionsResult
) => any;
export declare const ListProjectsRequestFilterSensitiveLog: (
  obj: ListProjectsRequest
) => any;
export declare const ListProjectsResultFilterSensitiveLog: (
  obj: ListProjectsResult
) => any;
export declare const ListRemoteAccessSessionsRequestFilterSensitiveLog: (
  obj: ListRemoteAccessSessionsRequest
) => any;
export declare const ListRemoteAccessSessionsResultFilterSensitiveLog: (
  obj: ListRemoteAccessSessionsResult
) => any;
export declare const ListRunsRequestFilterSensitiveLog: (
  obj: ListRunsRequest
) => any;
export declare const ListRunsResultFilterSensitiveLog: (
  obj: ListRunsResult
) => any;
export declare const ListSamplesRequestFilterSensitiveLog: (
  obj: ListSamplesRequest
) => any;
export declare const SampleFilterSensitiveLog: (obj: Sample) => any;
export declare const ListSamplesResultFilterSensitiveLog: (
  obj: ListSamplesResult
) => any;
export declare const ListSuitesRequestFilterSensitiveLog: (
  obj: ListSuitesRequest
) => any;
export declare const ListSuitesResultFilterSensitiveLog: (
  obj: ListSuitesResult
) => any;
export declare const ListTagsForResourceRequestFilterSensitiveLog: (
  obj: ListTagsForResourceRequest
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const ListTestGridProjectsRequestFilterSensitiveLog: (
  obj: ListTestGridProjectsRequest
) => any;
export declare const ListTestGridProjectsResultFilterSensitiveLog: (
  obj: ListTestGridProjectsResult
) => any;
export declare const ListTestGridSessionActionsRequestFilterSensitiveLog: (
  obj: ListTestGridSessionActionsRequest
) => any;
export declare const TestGridSessionActionFilterSensitiveLog: (
  obj: TestGridSessionAction
) => any;
export declare const ListTestGridSessionActionsResultFilterSensitiveLog: (
  obj: ListTestGridSessionActionsResult
) => any;
export declare const ListTestGridSessionArtifactsRequestFilterSensitiveLog: (
  obj: ListTestGridSessionArtifactsRequest
) => any;
export declare const TestGridSessionArtifactFilterSensitiveLog: (
  obj: TestGridSessionArtifact
) => any;
export declare const ListTestGridSessionArtifactsResultFilterSensitiveLog: (
  obj: ListTestGridSessionArtifactsResult
) => any;
export declare const ListTestGridSessionsRequestFilterSensitiveLog: (
  obj: ListTestGridSessionsRequest
) => any;
export declare const ListTestGridSessionsResultFilterSensitiveLog: (
  obj: ListTestGridSessionsResult
) => any;
export declare const ListTestsRequestFilterSensitiveLog: (
  obj: ListTestsRequest
) => any;
export declare const ListTestsResultFilterSensitiveLog: (
  obj: ListTestsResult
) => any;
export declare const ListUniqueProblemsRequestFilterSensitiveLog: (
  obj: ListUniqueProblemsRequest
) => any;
export declare const ProblemDetailFilterSensitiveLog: (
  obj: ProblemDetail
) => any;
export declare const ProblemFilterSensitiveLog: (obj: Problem) => any;
export declare const UniqueProblemFilterSensitiveLog: (
  obj: UniqueProblem
) => any;
export declare const ListUniqueProblemsResultFilterSensitiveLog: (
  obj: ListUniqueProblemsResult
) => any;
export declare const ListUploadsRequestFilterSensitiveLog: (
  obj: ListUploadsRequest
) => any;
export declare const ListUploadsResultFilterSensitiveLog: (
  obj: ListUploadsResult
) => any;
export declare const ListVPCEConfigurationsRequestFilterSensitiveLog: (
  obj: ListVPCEConfigurationsRequest
) => any;
export declare const ListVPCEConfigurationsResultFilterSensitiveLog: (
  obj: ListVPCEConfigurationsResult
) => any;
export declare const PurchaseOfferingRequestFilterSensitiveLog: (
  obj: PurchaseOfferingRequest
) => any;
export declare const PurchaseOfferingResultFilterSensitiveLog: (
  obj: PurchaseOfferingResult
) => any;
export declare const RenewOfferingRequestFilterSensitiveLog: (
  obj: RenewOfferingRequest
) => any;
export declare const RenewOfferingResultFilterSensitiveLog: (
  obj: RenewOfferingResult
) => any;
export declare const DeviceSelectionConfigurationFilterSensitiveLog: (
  obj: DeviceSelectionConfiguration
) => any;
export declare const ExecutionConfigurationFilterSensitiveLog: (
  obj: ExecutionConfiguration
) => any;
export declare const ScheduleRunRequestFilterSensitiveLog: (
  obj: ScheduleRunRequest
) => any;
export declare const ScheduleRunResultFilterSensitiveLog: (
  obj: ScheduleRunResult
) => any;
export declare const StopJobRequestFilterSensitiveLog: (
  obj: StopJobRequest
) => any;
export declare const StopJobResultFilterSensitiveLog: (
  obj: StopJobResult
) => any;
export declare const StopRemoteAccessSessionRequestFilterSensitiveLog: (
  obj: StopRemoteAccessSessionRequest
) => any;
export declare const StopRemoteAccessSessionResultFilterSensitiveLog: (
  obj: StopRemoteAccessSessionResult
) => any;
export declare const StopRunRequestFilterSensitiveLog: (
  obj: StopRunRequest
) => any;
export declare const StopRunResultFilterSensitiveLog: (
  obj: StopRunResult
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const TagResourceResponseFilterSensitiveLog: (
  obj: TagResourceResponse
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
export declare const UntagResourceResponseFilterSensitiveLog: (
  obj: UntagResourceResponse
) => any;
export declare const UpdateDeviceInstanceRequestFilterSensitiveLog: (
  obj: UpdateDeviceInstanceRequest
) => any;
export declare const UpdateDeviceInstanceResultFilterSensitiveLog: (
  obj: UpdateDeviceInstanceResult
) => any;
export declare const UpdateDevicePoolRequestFilterSensitiveLog: (
  obj: UpdateDevicePoolRequest
) => any;
export declare const UpdateDevicePoolResultFilterSensitiveLog: (
  obj: UpdateDevicePoolResult
) => any;
export declare const UpdateInstanceProfileRequestFilterSensitiveLog: (
  obj: UpdateInstanceProfileRequest
) => any;
export declare const UpdateInstanceProfileResultFilterSensitiveLog: (
  obj: UpdateInstanceProfileResult
) => any;
export declare const UpdateNetworkProfileRequestFilterSensitiveLog: (
  obj: UpdateNetworkProfileRequest
) => any;
export declare const UpdateNetworkProfileResultFilterSensitiveLog: (
  obj: UpdateNetworkProfileResult
) => any;
export declare const UpdateProjectRequestFilterSensitiveLog: (
  obj: UpdateProjectRequest
) => any;
export declare const UpdateProjectResultFilterSensitiveLog: (
  obj: UpdateProjectResult
) => any;
export declare const UpdateTestGridProjectRequestFilterSensitiveLog: (
  obj: UpdateTestGridProjectRequest
) => any;
export declare const UpdateTestGridProjectResultFilterSensitiveLog: (
  obj: UpdateTestGridProjectResult
) => any;
export declare const UpdateUploadRequestFilterSensitiveLog: (
  obj: UpdateUploadRequest
) => any;
export declare const UpdateUploadResultFilterSensitiveLog: (
  obj: UpdateUploadResult
) => any;
export declare const UpdateVPCEConfigurationRequestFilterSensitiveLog: (
  obj: UpdateVPCEConfigurationRequest
) => any;
export declare const UpdateVPCEConfigurationResultFilterSensitiveLog: (
  obj: UpdateVPCEConfigurationResult
) => any;
