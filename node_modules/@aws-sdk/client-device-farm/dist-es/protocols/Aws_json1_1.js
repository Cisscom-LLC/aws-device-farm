import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { DeviceFarmServiceException as __BaseException } from "../models/DeviceFarmServiceException";
import { ArgumentException, CannotDeleteException, IdempotencyException, InternalServiceException, InvalidOperationException, LimitExceededException, NotEligibleException, NotFoundException, ServiceAccountException, TagOperationException, TagPolicyException, TooManyTagsException, } from "../models/models_0";
export const serializeAws_json1_1CreateDevicePoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateDevicePool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDevicePoolRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateInstanceProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateInstanceProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateNetworkProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateNetworkProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNetworkProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateRemoteAccessSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateRemoteAccessSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateRemoteAccessSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateTestGridProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateTestGridProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTestGridProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateTestGridUrlCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateTestGridUrl",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTestGridUrlRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateVPCEConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.CreateVPCEConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateVPCEConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteDevicePoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteDevicePool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDevicePoolRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteInstanceProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteInstanceProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteNetworkProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteNetworkProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNetworkProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteRemoteAccessSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteRemoteAccessSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRemoteAccessSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteRunCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteRun",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteTestGridProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteTestGridProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteTestGridProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteVPCEConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.DeleteVPCEConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteVPCEConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetAccountSettingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetAccountSettings",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAccountSettingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetDeviceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetDevice",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDeviceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetDeviceInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetDeviceInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDeviceInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetDevicePoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetDevicePool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDevicePoolRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetDevicePoolCompatibilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetDevicePoolCompatibility",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDevicePoolCompatibilityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetInstanceProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetInstanceProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetNetworkProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetNetworkProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetNetworkProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetOfferingStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetOfferingStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOfferingStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetRemoteAccessSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetRemoteAccessSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRemoteAccessSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetRunCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetRun",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetSuiteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetSuite",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSuiteRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetTestCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetTest",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetTestRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetTestGridProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetTestGridProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetTestGridProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetTestGridSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetTestGridSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetTestGridSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetVPCEConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.GetVPCEConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetVPCEConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1InstallToRemoteAccessSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.InstallToRemoteAccessSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InstallToRemoteAccessSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListArtifactsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListArtifacts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListArtifactsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDeviceInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListDeviceInstances",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDeviceInstancesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDevicePoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListDevicePools",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDevicePoolsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDevicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListDevices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListInstanceProfilesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListInstanceProfiles",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListInstanceProfilesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListNetworkProfilesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListNetworkProfiles",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListNetworkProfilesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListOfferingPromotionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListOfferingPromotions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListOfferingPromotionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListOfferings",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListOfferingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListOfferingTransactionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListOfferingTransactions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListOfferingTransactionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListProjectsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListRemoteAccessSessionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListRemoteAccessSessions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListRemoteAccessSessionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListRunsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListRuns",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListSamplesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListSamples",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSamplesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListSuitesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListSuites",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSuitesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTestGridProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTestGridProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTestGridProjectsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTestGridSessionActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTestGridSessionActions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTestGridSessionActionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTestGridSessionArtifactsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTestGridSessionArtifacts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTestGridSessionArtifactsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTestGridSessionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTestGridSessions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTestGridSessionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListTests",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTestsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListUniqueProblemsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListUniqueProblems",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListUniqueProblemsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListUploadsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListUploads",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListUploadsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListVPCEConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ListVPCEConfigurations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListVPCEConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PurchaseOfferingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.PurchaseOffering",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PurchaseOfferingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RenewOfferingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.RenewOffering",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RenewOfferingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ScheduleRunCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.ScheduleRun",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ScheduleRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.StopJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopRemoteAccessSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.StopRemoteAccessSession",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopRemoteAccessSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopRunCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.StopRun",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateDeviceInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateDeviceInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDeviceInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateDevicePoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateDevicePool",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDevicePoolRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateInstanceProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateInstanceProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateNetworkProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateNetworkProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNetworkProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateTestGridProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateTestGridProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateTestGridProjectRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateVPCEConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "DeviceFarm_20150623.UpdateVPCEConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateVPCEConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1CreateDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDevicePoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDevicePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateDevicePoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNetworkProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNetworkProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateNetworkProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        case "TagOperationException":
        case "com.amazonaws.devicefarm#TagOperationException":
            throw await deserializeAws_json1_1TagOperationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateRemoteAccessSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateRemoteAccessSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTestGridProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateTestGridProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateTestGridUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTestGridUrlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTestGridUrlResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateTestGridUrlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateVPCEConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateVPCEConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateVPCEConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDevicePoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteDevicePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteDevicePoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNetworkProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteNetworkProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteNetworkProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRemoteAccessSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteRemoteAccessSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteTestGridProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteTestGridProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "CannotDeleteException":
        case "com.amazonaws.devicefarm#CannotDeleteException":
            throw await deserializeAws_json1_1CannotDeleteExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteVPCEConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteVPCEConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteVPCEConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.devicefarm#InvalidOperationException":
            throw await deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAccountSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAccountSettingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetAccountSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeviceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDeviceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetDeviceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetDeviceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeviceInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDeviceInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetDeviceInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDevicePoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDevicePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetDevicePoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetDevicePoolCompatibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDevicePoolCompatibilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDevicePoolCompatibilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetDevicePoolCompatibilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetJobResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetNetworkProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetNetworkProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetNetworkProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetOfferingStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOfferingStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOfferingStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOfferingStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRemoteAccessSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetRemoteAccessSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetSuiteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSuiteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSuiteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetSuiteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetTestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetTestCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetTestResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetTestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetTestGridProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetTestGridProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetTestGridSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetTestGridSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetTestGridSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetTestGridSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetVPCEConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetVPCEConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetVPCEConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1InstallToRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InstallToRemoteAccessSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InstallToRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1InstallToRemoteAccessSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListArtifactsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListArtifactsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListArtifactsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDeviceInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeviceInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDeviceInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDeviceInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDevicePoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDevicePoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDevicePoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDevicePoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDevicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDevicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListInstanceProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListInstanceProfilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListInstanceProfilesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListInstanceProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListJobsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListNetworkProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListNetworkProfilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListNetworkProfilesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListNetworkProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListOfferingPromotionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOfferingPromotionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListOfferingPromotionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListOfferingPromotionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListOfferingTransactionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOfferingTransactionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListOfferingTransactionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListOfferingTransactionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListProjectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListRemoteAccessSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListRemoteAccessSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListRemoteAccessSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListRemoteAccessSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListRunsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListSamplesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSamplesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSamplesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListSamplesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListSuitesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSuitesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSuitesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListSuitesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagOperationException":
        case "com.amazonaws.devicefarm#TagOperationException":
            throw await deserializeAws_json1_1TagOperationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTestGridProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTestGridProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTestGridProjectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTestGridProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTestGridSessionActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTestGridSessionActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTestGridSessionActionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTestGridSessionActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTestGridSessionArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTestGridSessionArtifactsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTestGridSessionArtifactsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTestGridSessionArtifactsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTestGridSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTestGridSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTestGridSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTestGridSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListUniqueProblemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListUniqueProblemsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListUniqueProblemsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListUniqueProblemsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListUploadsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListUploadsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListUploadsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListUploadsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListVPCEConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListVPCEConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListVPCEConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListVPCEConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PurchaseOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PurchaseOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PurchaseOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PurchaseOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RenewOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RenewOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RenewOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RenewOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await deserializeAws_json1_1NotEligibleExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ScheduleRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ScheduleRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ScheduleRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ScheduleRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "IdempotencyException":
        case "com.amazonaws.devicefarm#IdempotencyException":
            throw await deserializeAws_json1_1IdempotencyExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopJobResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopRemoteAccessSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopRemoteAccessSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagOperationException":
        case "com.amazonaws.devicefarm#TagOperationException":
            throw await deserializeAws_json1_1TagOperationExceptionResponse(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.devicefarm#TagPolicyException":
            throw await deserializeAws_json1_1TagPolicyExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.devicefarm#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "TagOperationException":
        case "com.amazonaws.devicefarm#TagOperationException":
            throw await deserializeAws_json1_1TagOperationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateDeviceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDeviceInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDeviceInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateDeviceInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDevicePoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDevicePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateDevicePoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNetworkProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNetworkProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateNetworkProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateTestGridProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateTestGridProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await deserializeAws_json1_1InternalServiceExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateVPCEConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateVPCEConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateVPCEConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await deserializeAws_json1_1ArgumentExceptionResponse(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.devicefarm#InvalidOperationException":
            throw await deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await deserializeAws_json1_1ServiceAccountExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ArgumentExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ArgumentException(body, context);
    const exception = new ArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1CannotDeleteExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1CannotDeleteException(body, context);
    const exception = new CannotDeleteException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1IdempotencyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1IdempotencyException(body, context);
    const exception = new IdempotencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InternalServiceExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServiceException(body, context);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidOperationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NotEligibleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NotEligibleException(body, context);
    const exception = new NotEligibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NotFoundException(body, context);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ServiceAccountExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServiceAccountException(body, context);
    const exception = new ServiceAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1TagOperationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TagOperationException(body, context);
    const exception = new TagOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1TagPolicyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TagPolicyException(body, context);
    const exception = new TagPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1TooManyTagsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1AmazonResourceNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1AndroidPaths = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1CreateDevicePoolRequest = (input, context) => {
    return {
        ...(input.description != null && { description: input.description }),
        ...(input.maxDevices != null && { maxDevices: input.maxDevices }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.rules != null && { rules: serializeAws_json1_1Rules(input.rules, context) }),
    };
};
const serializeAws_json1_1CreateInstanceProfileRequest = (input, context) => {
    return {
        ...(input.description != null && { description: input.description }),
        ...(input.excludeAppPackagesFromCleanup != null && {
            excludeAppPackagesFromCleanup: serializeAws_json1_1PackageIds(input.excludeAppPackagesFromCleanup, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.packageCleanup != null && { packageCleanup: input.packageCleanup }),
        ...(input.rebootAfterUse != null && { rebootAfterUse: input.rebootAfterUse }),
    };
};
const serializeAws_json1_1CreateNetworkProfileRequest = (input, context) => {
    return {
        ...(input.description != null && { description: input.description }),
        ...(input.downlinkBandwidthBits != null && { downlinkBandwidthBits: input.downlinkBandwidthBits }),
        ...(input.downlinkDelayMs != null && { downlinkDelayMs: input.downlinkDelayMs }),
        ...(input.downlinkJitterMs != null && { downlinkJitterMs: input.downlinkJitterMs }),
        ...(input.downlinkLossPercent != null && { downlinkLossPercent: input.downlinkLossPercent }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.type != null && { type: input.type }),
        ...(input.uplinkBandwidthBits != null && { uplinkBandwidthBits: input.uplinkBandwidthBits }),
        ...(input.uplinkDelayMs != null && { uplinkDelayMs: input.uplinkDelayMs }),
        ...(input.uplinkJitterMs != null && { uplinkJitterMs: input.uplinkJitterMs }),
        ...(input.uplinkLossPercent != null && { uplinkLossPercent: input.uplinkLossPercent }),
    };
};
const serializeAws_json1_1CreateProjectRequest = (input, context) => {
    return {
        ...(input.defaultJobTimeoutMinutes != null && { defaultJobTimeoutMinutes: input.defaultJobTimeoutMinutes }),
        ...(input.name != null && { name: input.name }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1VpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateRemoteAccessSessionConfiguration = (input, context) => {
    return {
        ...(input.billingMethod != null && { billingMethod: input.billingMethod }),
        ...(input.vpceConfigurationArns != null && {
            vpceConfigurationArns: serializeAws_json1_1AmazonResourceNames(input.vpceConfigurationArns, context),
        }),
    };
};
const serializeAws_json1_1CreateRemoteAccessSessionRequest = (input, context) => {
    return {
        ...(input.clientId != null && { clientId: input.clientId }),
        ...(input.configuration != null && {
            configuration: serializeAws_json1_1CreateRemoteAccessSessionConfiguration(input.configuration, context),
        }),
        ...(input.deviceArn != null && { deviceArn: input.deviceArn }),
        ...(input.instanceArn != null && { instanceArn: input.instanceArn }),
        ...(input.interactionMode != null && { interactionMode: input.interactionMode }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.remoteDebugEnabled != null && { remoteDebugEnabled: input.remoteDebugEnabled }),
        ...(input.remoteRecordAppArn != null && { remoteRecordAppArn: input.remoteRecordAppArn }),
        ...(input.remoteRecordEnabled != null && { remoteRecordEnabled: input.remoteRecordEnabled }),
        ...(input.skipAppResign != null && { skipAppResign: input.skipAppResign }),
        ...(input.sshPublicKey != null && { sshPublicKey: input.sshPublicKey }),
    };
};
const serializeAws_json1_1CreateTestGridProjectRequest = (input, context) => {
    return {
        ...(input.description != null && { description: input.description }),
        ...(input.name != null && { name: input.name }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1TestGridVpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateTestGridUrlRequest = (input, context) => {
    return {
        ...(input.expiresInSeconds != null && { expiresInSeconds: input.expiresInSeconds }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
    };
};
const serializeAws_json1_1CreateUploadRequest = (input, context) => {
    return {
        ...(input.contentType != null && { contentType: input.contentType }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1CreateVPCEConfigurationRequest = (input, context) => {
    return {
        ...(input.serviceDnsName != null && { serviceDnsName: input.serviceDnsName }),
        ...(input.vpceConfigurationDescription != null && {
            vpceConfigurationDescription: input.vpceConfigurationDescription,
        }),
        ...(input.vpceConfigurationName != null && { vpceConfigurationName: input.vpceConfigurationName }),
        ...(input.vpceServiceName != null && { vpceServiceName: input.vpceServiceName }),
    };
};
const serializeAws_json1_1CustomerArtifactPaths = (input, context) => {
    return {
        ...(input.androidPaths != null && { androidPaths: serializeAws_json1_1AndroidPaths(input.androidPaths, context) }),
        ...(input.deviceHostPaths != null && {
            deviceHostPaths: serializeAws_json1_1DeviceHostPaths(input.deviceHostPaths, context),
        }),
        ...(input.iosPaths != null && { iosPaths: serializeAws_json1_1IosPaths(input.iosPaths, context) }),
    };
};
const serializeAws_json1_1DeleteDevicePoolRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteInstanceProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteNetworkProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteProjectRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteRemoteAccessSessionRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteRunRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteTestGridProjectRequest = (input, context) => {
    return {
        ...(input.projectArn != null && { projectArn: input.projectArn }),
    };
};
const serializeAws_json1_1DeleteUploadRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteVPCEConfigurationRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeviceFilter = (input, context) => {
    return {
        ...(input.attribute != null && { attribute: input.attribute }),
        ...(input.operator != null && { operator: input.operator }),
        ...(input.values != null && { values: serializeAws_json1_1DeviceFilterValues(input.values, context) }),
    };
};
const serializeAws_json1_1DeviceFilters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DeviceFilter(entry, context);
    });
};
const serializeAws_json1_1DeviceFilterValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DeviceHostPaths = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DeviceSelectionConfiguration = (input, context) => {
    return {
        ...(input.filters != null && { filters: serializeAws_json1_1DeviceFilters(input.filters, context) }),
        ...(input.maxDevices != null && { maxDevices: input.maxDevices }),
    };
};
const serializeAws_json1_1ExecutionConfiguration = (input, context) => {
    return {
        ...(input.accountsCleanup != null && { accountsCleanup: input.accountsCleanup }),
        ...(input.appPackagesCleanup != null && { appPackagesCleanup: input.appPackagesCleanup }),
        ...(input.jobTimeoutMinutes != null && { jobTimeoutMinutes: input.jobTimeoutMinutes }),
        ...(input.skipAppResign != null && { skipAppResign: input.skipAppResign }),
        ...(input.videoCapture != null && { videoCapture: input.videoCapture }),
    };
};
const serializeAws_json1_1GetAccountSettingsRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1GetDeviceInstanceRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetDevicePoolCompatibilityRequest = (input, context) => {
    return {
        ...(input.appArn != null && { appArn: input.appArn }),
        ...(input.configuration != null && {
            configuration: serializeAws_json1_1ScheduleRunConfiguration(input.configuration, context),
        }),
        ...(input.devicePoolArn != null && { devicePoolArn: input.devicePoolArn }),
        ...(input.test != null && { test: serializeAws_json1_1ScheduleRunTest(input.test, context) }),
        ...(input.testType != null && { testType: input.testType }),
    };
};
const serializeAws_json1_1GetDevicePoolRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetDeviceRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetInstanceProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetJobRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetNetworkProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetOfferingStatusRequest = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1GetProjectRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetRemoteAccessSessionRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetRunRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetSuiteRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetTestGridProjectRequest = (input, context) => {
    return {
        ...(input.projectArn != null && { projectArn: input.projectArn }),
    };
};
const serializeAws_json1_1GetTestGridSessionRequest = (input, context) => {
    return {
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.sessionArn != null && { sessionArn: input.sessionArn }),
        ...(input.sessionId != null && { sessionId: input.sessionId }),
    };
};
const serializeAws_json1_1GetTestRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetUploadRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1GetVPCEConfigurationRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1InstallToRemoteAccessSessionRequest = (input, context) => {
    return {
        ...(input.appArn != null && { appArn: input.appArn }),
        ...(input.remoteAccessSessionArn != null && { remoteAccessSessionArn: input.remoteAccessSessionArn }),
    };
};
const serializeAws_json1_1InstanceLabels = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1IosPaths = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ListArtifactsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ListDeviceInstancesRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListDevicePoolsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ListDevicesRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.filters != null && { filters: serializeAws_json1_1DeviceFilters(input.filters, context) }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListInstanceProfilesRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListJobsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListNetworkProfilesRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ListOfferingPromotionsRequest = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListOfferingsRequest = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListOfferingTransactionsRequest = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListProjectsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListRemoteAccessSessionsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListRunsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListSamplesRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListSuitesRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
    };
};
const serializeAws_json1_1ListTestGridProjectsRequest = (input, context) => {
    return {
        ...(input.maxResult != null && { maxResult: input.maxResult }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListTestGridSessionActionsRequest = (input, context) => {
    return {
        ...(input.maxResult != null && { maxResult: input.maxResult }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sessionArn != null && { sessionArn: input.sessionArn }),
    };
};
const serializeAws_json1_1ListTestGridSessionArtifactsRequest = (input, context) => {
    return {
        ...(input.maxResult != null && { maxResult: input.maxResult }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sessionArn != null && { sessionArn: input.sessionArn }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ListTestGridSessionsRequest = (input, context) => {
    return {
        ...(input.creationTimeAfter != null && { creationTimeAfter: Math.round(input.creationTimeAfter.getTime() / 1000) }),
        ...(input.creationTimeBefore != null && {
            creationTimeBefore: Math.round(input.creationTimeBefore.getTime() / 1000),
        }),
        ...(input.endTimeAfter != null && { endTimeAfter: Math.round(input.endTimeAfter.getTime() / 1000) }),
        ...(input.endTimeBefore != null && { endTimeBefore: Math.round(input.endTimeBefore.getTime() / 1000) }),
        ...(input.maxResult != null && { maxResult: input.maxResult }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.status != null && { status: input.status }),
    };
};
const serializeAws_json1_1ListTestsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListUniqueProblemsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1ListUploadsRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ListVPCEConfigurationsRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const serializeAws_json1_1Location = (input, context) => {
    return {
        ...(input.latitude != null && { latitude: __serializeFloat(input.latitude) }),
        ...(input.longitude != null && { longitude: __serializeFloat(input.longitude) }),
    };
};
const serializeAws_json1_1PackageIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PurchaseOfferingRequest = (input, context) => {
    return {
        ...(input.offeringId != null && { offeringId: input.offeringId }),
        ...(input.offeringPromotionId != null && { offeringPromotionId: input.offeringPromotionId }),
        ...(input.quantity != null && { quantity: input.quantity }),
    };
};
const serializeAws_json1_1Radios = (input, context) => {
    return {
        ...(input.bluetooth != null && { bluetooth: input.bluetooth }),
        ...(input.gps != null && { gps: input.gps }),
        ...(input.nfc != null && { nfc: input.nfc }),
        ...(input.wifi != null && { wifi: input.wifi }),
    };
};
const serializeAws_json1_1RenewOfferingRequest = (input, context) => {
    return {
        ...(input.offeringId != null && { offeringId: input.offeringId }),
        ...(input.quantity != null && { quantity: input.quantity }),
    };
};
const serializeAws_json1_1Rule = (input, context) => {
    return {
        ...(input.attribute != null && { attribute: input.attribute }),
        ...(input.operator != null && { operator: input.operator }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_json1_1Rules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Rule(entry, context);
    });
};
const serializeAws_json1_1ScheduleRunConfiguration = (input, context) => {
    return {
        ...(input.auxiliaryApps != null && {
            auxiliaryApps: serializeAws_json1_1AmazonResourceNames(input.auxiliaryApps, context),
        }),
        ...(input.billingMethod != null && { billingMethod: input.billingMethod }),
        ...(input.customerArtifactPaths != null && {
            customerArtifactPaths: serializeAws_json1_1CustomerArtifactPaths(input.customerArtifactPaths, context),
        }),
        ...(input.extraDataPackageArn != null && { extraDataPackageArn: input.extraDataPackageArn }),
        ...(input.locale != null && { locale: input.locale }),
        ...(input.location != null && { location: serializeAws_json1_1Location(input.location, context) }),
        ...(input.networkProfileArn != null && { networkProfileArn: input.networkProfileArn }),
        ...(input.radios != null && { radios: serializeAws_json1_1Radios(input.radios, context) }),
        ...(input.vpceConfigurationArns != null && {
            vpceConfigurationArns: serializeAws_json1_1AmazonResourceNames(input.vpceConfigurationArns, context),
        }),
    };
};
const serializeAws_json1_1ScheduleRunRequest = (input, context) => {
    return {
        ...(input.appArn != null && { appArn: input.appArn }),
        ...(input.configuration != null && {
            configuration: serializeAws_json1_1ScheduleRunConfiguration(input.configuration, context),
        }),
        ...(input.devicePoolArn != null && { devicePoolArn: input.devicePoolArn }),
        ...(input.deviceSelectionConfiguration != null && {
            deviceSelectionConfiguration: serializeAws_json1_1DeviceSelectionConfiguration(input.deviceSelectionConfiguration, context),
        }),
        ...(input.executionConfiguration != null && {
            executionConfiguration: serializeAws_json1_1ExecutionConfiguration(input.executionConfiguration, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.test != null && { test: serializeAws_json1_1ScheduleRunTest(input.test, context) }),
    };
};
const serializeAws_json1_1ScheduleRunTest = (input, context) => {
    return {
        ...(input.filter != null && { filter: input.filter }),
        ...(input.parameters != null && { parameters: serializeAws_json1_1TestParameters(input.parameters, context) }),
        ...(input.testPackageArn != null && { testPackageArn: input.testPackageArn }),
        ...(input.testSpecArn != null && { testSpecArn: input.testSpecArn }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1SecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1StopJobRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1StopRemoteAccessSessionRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1StopRunRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1SubnetIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1TestGridVpcConfig = (input, context) => {
    return {
        ...(input.securityGroupIds != null && {
            securityGroupIds: serializeAws_json1_1SecurityGroupIds(input.securityGroupIds, context),
        }),
        ...(input.subnetIds != null && { subnetIds: serializeAws_json1_1SubnetIds(input.subnetIds, context) }),
        ...(input.vpcId != null && { vpcId: input.vpcId }),
    };
};
const serializeAws_json1_1TestParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateDeviceInstanceRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.labels != null && { labels: serializeAws_json1_1InstanceLabels(input.labels, context) }),
        ...(input.profileArn != null && { profileArn: input.profileArn }),
    };
};
const serializeAws_json1_1UpdateDevicePoolRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.clearMaxDevices != null && { clearMaxDevices: input.clearMaxDevices }),
        ...(input.description != null && { description: input.description }),
        ...(input.maxDevices != null && { maxDevices: input.maxDevices }),
        ...(input.name != null && { name: input.name }),
        ...(input.rules != null && { rules: serializeAws_json1_1Rules(input.rules, context) }),
    };
};
const serializeAws_json1_1UpdateInstanceProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.description != null && { description: input.description }),
        ...(input.excludeAppPackagesFromCleanup != null && {
            excludeAppPackagesFromCleanup: serializeAws_json1_1PackageIds(input.excludeAppPackagesFromCleanup, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.packageCleanup != null && { packageCleanup: input.packageCleanup }),
        ...(input.rebootAfterUse != null && { rebootAfterUse: input.rebootAfterUse }),
    };
};
const serializeAws_json1_1UpdateNetworkProfileRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.description != null && { description: input.description }),
        ...(input.downlinkBandwidthBits != null && { downlinkBandwidthBits: input.downlinkBandwidthBits }),
        ...(input.downlinkDelayMs != null && { downlinkDelayMs: input.downlinkDelayMs }),
        ...(input.downlinkJitterMs != null && { downlinkJitterMs: input.downlinkJitterMs }),
        ...(input.downlinkLossPercent != null && { downlinkLossPercent: input.downlinkLossPercent }),
        ...(input.name != null && { name: input.name }),
        ...(input.type != null && { type: input.type }),
        ...(input.uplinkBandwidthBits != null && { uplinkBandwidthBits: input.uplinkBandwidthBits }),
        ...(input.uplinkDelayMs != null && { uplinkDelayMs: input.uplinkDelayMs }),
        ...(input.uplinkJitterMs != null && { uplinkJitterMs: input.uplinkJitterMs }),
        ...(input.uplinkLossPercent != null && { uplinkLossPercent: input.uplinkLossPercent }),
    };
};
const serializeAws_json1_1UpdateProjectRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.defaultJobTimeoutMinutes != null && { defaultJobTimeoutMinutes: input.defaultJobTimeoutMinutes }),
        ...(input.name != null && { name: input.name }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1VpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1UpdateTestGridProjectRequest = (input, context) => {
    return {
        ...(input.description != null && { description: input.description }),
        ...(input.name != null && { name: input.name }),
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1TestGridVpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1UpdateUploadRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.contentType != null && { contentType: input.contentType }),
        ...(input.editContent != null && { editContent: input.editContent }),
        ...(input.name != null && { name: input.name }),
    };
};
const serializeAws_json1_1UpdateVPCEConfigurationRequest = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.serviceDnsName != null && { serviceDnsName: input.serviceDnsName }),
        ...(input.vpceConfigurationDescription != null && {
            vpceConfigurationDescription: input.vpceConfigurationDescription,
        }),
        ...(input.vpceConfigurationName != null && { vpceConfigurationName: input.vpceConfigurationName }),
        ...(input.vpceServiceName != null && { vpceServiceName: input.vpceServiceName }),
    };
};
const serializeAws_json1_1VpcConfig = (input, context) => {
    return {
        ...(input.securityGroupIds != null && {
            securityGroupIds: serializeAws_json1_1VpcSecurityGroupIds(input.securityGroupIds, context),
        }),
        ...(input.subnetIds != null && { subnetIds: serializeAws_json1_1VpcSubnetIds(input.subnetIds, context) }),
        ...(input.vpcId != null && { vpcId: input.vpcId }),
    };
};
const serializeAws_json1_1VpcSecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1VpcSubnetIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const deserializeAws_json1_1AccountSettings = (output, context) => {
    return {
        awsAccountNumber: __expectString(output.awsAccountNumber),
        defaultJobTimeoutMinutes: __expectInt32(output.defaultJobTimeoutMinutes),
        maxJobTimeoutMinutes: __expectInt32(output.maxJobTimeoutMinutes),
        maxSlots: output.maxSlots != null ? deserializeAws_json1_1MaxSlotMap(output.maxSlots, context) : undefined,
        skipAppResign: __expectBoolean(output.skipAppResign),
        trialMinutes: output.trialMinutes != null ? deserializeAws_json1_1TrialMinutes(output.trialMinutes, context) : undefined,
        unmeteredDevices: output.unmeteredDevices != null
            ? deserializeAws_json1_1PurchasedDevicesMap(output.unmeteredDevices, context)
            : undefined,
        unmeteredRemoteAccessDevices: output.unmeteredRemoteAccessDevices != null
            ? deserializeAws_json1_1PurchasedDevicesMap(output.unmeteredRemoteAccessDevices, context)
            : undefined,
    };
};
const deserializeAws_json1_1AndroidPaths = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ArgumentException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1Artifact = (output, context) => {
    return {
        arn: __expectString(output.arn),
        extension: __expectString(output.extension),
        name: __expectString(output.name),
        type: __expectString(output.type),
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1Artifacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Artifact(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CannotDeleteException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1Counters = (output, context) => {
    return {
        errored: __expectInt32(output.errored),
        failed: __expectInt32(output.failed),
        passed: __expectInt32(output.passed),
        skipped: __expectInt32(output.skipped),
        stopped: __expectInt32(output.stopped),
        total: __expectInt32(output.total),
        warned: __expectInt32(output.warned),
    };
};
const deserializeAws_json1_1CPU = (output, context) => {
    return {
        architecture: __expectString(output.architecture),
        clock: __limitedParseDouble(output.clock),
        frequency: __expectString(output.frequency),
    };
};
const deserializeAws_json1_1CreateDevicePoolResult = (output, context) => {
    return {
        devicePool: output.devicePool != null ? deserializeAws_json1_1DevicePool(output.devicePool, context) : undefined,
    };
};
const deserializeAws_json1_1CreateInstanceProfileResult = (output, context) => {
    return {
        instanceProfile: output.instanceProfile != null
            ? deserializeAws_json1_1InstanceProfile(output.instanceProfile, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateNetworkProfileResult = (output, context) => {
    return {
        networkProfile: output.networkProfile != null ? deserializeAws_json1_1NetworkProfile(output.networkProfile, context) : undefined,
    };
};
const deserializeAws_json1_1CreateProjectResult = (output, context) => {
    return {
        project: output.project != null ? deserializeAws_json1_1Project(output.project, context) : undefined,
    };
};
const deserializeAws_json1_1CreateRemoteAccessSessionResult = (output, context) => {
    return {
        remoteAccessSession: output.remoteAccessSession != null
            ? deserializeAws_json1_1RemoteAccessSession(output.remoteAccessSession, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateTestGridProjectResult = (output, context) => {
    return {
        testGridProject: output.testGridProject != null
            ? deserializeAws_json1_1TestGridProject(output.testGridProject, context)
            : undefined,
    };
};
const deserializeAws_json1_1CreateTestGridUrlResult = (output, context) => {
    return {
        expires: output.expires != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.expires))) : undefined,
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1CreateUploadResult = (output, context) => {
    return {
        upload: output.upload != null ? deserializeAws_json1_1Upload(output.upload, context) : undefined,
    };
};
const deserializeAws_json1_1CreateVPCEConfigurationResult = (output, context) => {
    return {
        vpceConfiguration: output.vpceConfiguration != null
            ? deserializeAws_json1_1VPCEConfiguration(output.vpceConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1CustomerArtifactPaths = (output, context) => {
    return {
        androidPaths: output.androidPaths != null ? deserializeAws_json1_1AndroidPaths(output.androidPaths, context) : undefined,
        deviceHostPaths: output.deviceHostPaths != null
            ? deserializeAws_json1_1DeviceHostPaths(output.deviceHostPaths, context)
            : undefined,
        iosPaths: output.iosPaths != null ? deserializeAws_json1_1IosPaths(output.iosPaths, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteDevicePoolResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteInstanceProfileResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteNetworkProfileResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteProjectResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteRemoteAccessSessionResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteRunResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteTestGridProjectResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteUploadResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteVPCEConfigurationResult = (output, context) => {
    return {};
};
const deserializeAws_json1_1Device = (output, context) => {
    return {
        arn: __expectString(output.arn),
        availability: __expectString(output.availability),
        carrier: __expectString(output.carrier),
        cpu: output.cpu != null ? deserializeAws_json1_1CPU(output.cpu, context) : undefined,
        fleetName: __expectString(output.fleetName),
        fleetType: __expectString(output.fleetType),
        formFactor: __expectString(output.formFactor),
        heapSize: __expectLong(output.heapSize),
        image: __expectString(output.image),
        instances: output.instances != null ? deserializeAws_json1_1DeviceInstances(output.instances, context) : undefined,
        manufacturer: __expectString(output.manufacturer),
        memory: __expectLong(output.memory),
        model: __expectString(output.model),
        modelId: __expectString(output.modelId),
        name: __expectString(output.name),
        os: __expectString(output.os),
        platform: __expectString(output.platform),
        radio: __expectString(output.radio),
        remoteAccessEnabled: __expectBoolean(output.remoteAccessEnabled),
        remoteDebugEnabled: __expectBoolean(output.remoteDebugEnabled),
        resolution: output.resolution != null ? deserializeAws_json1_1Resolution(output.resolution, context) : undefined,
    };
};
const deserializeAws_json1_1DeviceFilter = (output, context) => {
    return {
        attribute: __expectString(output.attribute),
        operator: __expectString(output.operator),
        values: output.values != null ? deserializeAws_json1_1DeviceFilterValues(output.values, context) : undefined,
    };
};
const deserializeAws_json1_1DeviceFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeviceFilter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeviceFilterValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DeviceHostPaths = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DeviceInstance = (output, context) => {
    return {
        arn: __expectString(output.arn),
        deviceArn: __expectString(output.deviceArn),
        instanceProfile: output.instanceProfile != null
            ? deserializeAws_json1_1InstanceProfile(output.instanceProfile, context)
            : undefined,
        labels: output.labels != null ? deserializeAws_json1_1InstanceLabels(output.labels, context) : undefined,
        status: __expectString(output.status),
        udid: __expectString(output.udid),
    };
};
const deserializeAws_json1_1DeviceInstances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeviceInstance(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeviceMinutes = (output, context) => {
    return {
        metered: __limitedParseDouble(output.metered),
        total: __limitedParseDouble(output.total),
        unmetered: __limitedParseDouble(output.unmetered),
    };
};
const deserializeAws_json1_1DevicePool = (output, context) => {
    return {
        arn: __expectString(output.arn),
        description: __expectString(output.description),
        maxDevices: __expectInt32(output.maxDevices),
        name: __expectString(output.name),
        rules: output.rules != null ? deserializeAws_json1_1Rules(output.rules, context) : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1DevicePoolCompatibilityResult = (output, context) => {
    return {
        compatible: __expectBoolean(output.compatible),
        device: output.device != null ? deserializeAws_json1_1Device(output.device, context) : undefined,
        incompatibilityMessages: output.incompatibilityMessages != null
            ? deserializeAws_json1_1IncompatibilityMessages(output.incompatibilityMessages, context)
            : undefined,
    };
};
const deserializeAws_json1_1DevicePoolCompatibilityResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DevicePoolCompatibilityResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DevicePools = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DevicePool(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Devices = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Device(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeviceSelectionResult = (output, context) => {
    return {
        filters: output.filters != null ? deserializeAws_json1_1DeviceFilters(output.filters, context) : undefined,
        matchedDevicesCount: __expectInt32(output.matchedDevicesCount),
        maxDevices: __expectInt32(output.maxDevices),
    };
};
const deserializeAws_json1_1GetAccountSettingsResult = (output, context) => {
    return {
        accountSettings: output.accountSettings != null
            ? deserializeAws_json1_1AccountSettings(output.accountSettings, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetDeviceInstanceResult = (output, context) => {
    return {
        deviceInstance: output.deviceInstance != null ? deserializeAws_json1_1DeviceInstance(output.deviceInstance, context) : undefined,
    };
};
const deserializeAws_json1_1GetDevicePoolCompatibilityResult = (output, context) => {
    return {
        compatibleDevices: output.compatibleDevices != null
            ? deserializeAws_json1_1DevicePoolCompatibilityResults(output.compatibleDevices, context)
            : undefined,
        incompatibleDevices: output.incompatibleDevices != null
            ? deserializeAws_json1_1DevicePoolCompatibilityResults(output.incompatibleDevices, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetDevicePoolResult = (output, context) => {
    return {
        devicePool: output.devicePool != null ? deserializeAws_json1_1DevicePool(output.devicePool, context) : undefined,
    };
};
const deserializeAws_json1_1GetDeviceResult = (output, context) => {
    return {
        device: output.device != null ? deserializeAws_json1_1Device(output.device, context) : undefined,
    };
};
const deserializeAws_json1_1GetInstanceProfileResult = (output, context) => {
    return {
        instanceProfile: output.instanceProfile != null
            ? deserializeAws_json1_1InstanceProfile(output.instanceProfile, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetJobResult = (output, context) => {
    return {
        job: output.job != null ? deserializeAws_json1_1Job(output.job, context) : undefined,
    };
};
const deserializeAws_json1_1GetNetworkProfileResult = (output, context) => {
    return {
        networkProfile: output.networkProfile != null ? deserializeAws_json1_1NetworkProfile(output.networkProfile, context) : undefined,
    };
};
const deserializeAws_json1_1GetOfferingStatusResult = (output, context) => {
    return {
        current: output.current != null ? deserializeAws_json1_1OfferingStatusMap(output.current, context) : undefined,
        nextPeriod: output.nextPeriod != null ? deserializeAws_json1_1OfferingStatusMap(output.nextPeriod, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1GetProjectResult = (output, context) => {
    return {
        project: output.project != null ? deserializeAws_json1_1Project(output.project, context) : undefined,
    };
};
const deserializeAws_json1_1GetRemoteAccessSessionResult = (output, context) => {
    return {
        remoteAccessSession: output.remoteAccessSession != null
            ? deserializeAws_json1_1RemoteAccessSession(output.remoteAccessSession, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetRunResult = (output, context) => {
    return {
        run: output.run != null ? deserializeAws_json1_1Run(output.run, context) : undefined,
    };
};
const deserializeAws_json1_1GetSuiteResult = (output, context) => {
    return {
        suite: output.suite != null ? deserializeAws_json1_1Suite(output.suite, context) : undefined,
    };
};
const deserializeAws_json1_1GetTestGridProjectResult = (output, context) => {
    return {
        testGridProject: output.testGridProject != null
            ? deserializeAws_json1_1TestGridProject(output.testGridProject, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetTestGridSessionResult = (output, context) => {
    return {
        testGridSession: output.testGridSession != null
            ? deserializeAws_json1_1TestGridSession(output.testGridSession, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetTestResult = (output, context) => {
    return {
        test: output.test != null ? deserializeAws_json1_1Test(output.test, context) : undefined,
    };
};
const deserializeAws_json1_1GetUploadResult = (output, context) => {
    return {
        upload: output.upload != null ? deserializeAws_json1_1Upload(output.upload, context) : undefined,
    };
};
const deserializeAws_json1_1GetVPCEConfigurationResult = (output, context) => {
    return {
        vpceConfiguration: output.vpceConfiguration != null
            ? deserializeAws_json1_1VPCEConfiguration(output.vpceConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1IdempotencyException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1IncompatibilityMessage = (output, context) => {
    return {
        message: __expectString(output.message),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1IncompatibilityMessages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1IncompatibilityMessage(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1InstallToRemoteAccessSessionResult = (output, context) => {
    return {
        appUpload: output.appUpload != null ? deserializeAws_json1_1Upload(output.appUpload, context) : undefined,
    };
};
const deserializeAws_json1_1InstanceLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1InstanceProfile = (output, context) => {
    return {
        arn: __expectString(output.arn),
        description: __expectString(output.description),
        excludeAppPackagesFromCleanup: output.excludeAppPackagesFromCleanup != null
            ? deserializeAws_json1_1PackageIds(output.excludeAppPackagesFromCleanup, context)
            : undefined,
        name: __expectString(output.name),
        packageCleanup: __expectBoolean(output.packageCleanup),
        rebootAfterUse: __expectBoolean(output.rebootAfterUse),
    };
};
const deserializeAws_json1_1InstanceProfiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1InstanceProfile(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1InternalServiceException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidOperationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1IosPaths = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Job = (output, context) => {
    return {
        arn: __expectString(output.arn),
        counters: output.counters != null ? deserializeAws_json1_1Counters(output.counters, context) : undefined,
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        device: output.device != null ? deserializeAws_json1_1Device(output.device, context) : undefined,
        deviceMinutes: output.deviceMinutes != null ? deserializeAws_json1_1DeviceMinutes(output.deviceMinutes, context) : undefined,
        instanceArn: __expectString(output.instanceArn),
        message: __expectString(output.message),
        name: __expectString(output.name),
        result: __expectString(output.result),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        status: __expectString(output.status),
        stopped: output.stopped != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.stopped))) : undefined,
        type: __expectString(output.type),
        videoCapture: __expectBoolean(output.videoCapture),
        videoEndpoint: __expectString(output.videoEndpoint),
    };
};
const deserializeAws_json1_1Jobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Job(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ListArtifactsResult = (output, context) => {
    return {
        artifacts: output.artifacts != null ? deserializeAws_json1_1Artifacts(output.artifacts, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListDeviceInstancesResult = (output, context) => {
    return {
        deviceInstances: output.deviceInstances != null
            ? deserializeAws_json1_1DeviceInstances(output.deviceInstances, context)
            : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListDevicePoolsResult = (output, context) => {
    return {
        devicePools: output.devicePools != null ? deserializeAws_json1_1DevicePools(output.devicePools, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListDevicesResult = (output, context) => {
    return {
        devices: output.devices != null ? deserializeAws_json1_1Devices(output.devices, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListInstanceProfilesResult = (output, context) => {
    return {
        instanceProfiles: output.instanceProfiles != null
            ? deserializeAws_json1_1InstanceProfiles(output.instanceProfiles, context)
            : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListJobsResult = (output, context) => {
    return {
        jobs: output.jobs != null ? deserializeAws_json1_1Jobs(output.jobs, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListNetworkProfilesResult = (output, context) => {
    return {
        networkProfiles: output.networkProfiles != null
            ? deserializeAws_json1_1NetworkProfiles(output.networkProfiles, context)
            : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListOfferingPromotionsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        offeringPromotions: output.offeringPromotions != null
            ? deserializeAws_json1_1OfferingPromotions(output.offeringPromotions, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListOfferingsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        offerings: output.offerings != null ? deserializeAws_json1_1Offerings(output.offerings, context) : undefined,
    };
};
const deserializeAws_json1_1ListOfferingTransactionsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        offeringTransactions: output.offeringTransactions != null
            ? deserializeAws_json1_1OfferingTransactions(output.offeringTransactions, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListProjectsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        projects: output.projects != null ? deserializeAws_json1_1Projects(output.projects, context) : undefined,
    };
};
const deserializeAws_json1_1ListRemoteAccessSessionsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        remoteAccessSessions: output.remoteAccessSessions != null
            ? deserializeAws_json1_1RemoteAccessSessions(output.remoteAccessSessions, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListRunsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        runs: output.runs != null ? deserializeAws_json1_1Runs(output.runs, context) : undefined,
    };
};
const deserializeAws_json1_1ListSamplesResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        samples: output.samples != null ? deserializeAws_json1_1Samples(output.samples, context) : undefined,
    };
};
const deserializeAws_json1_1ListSuitesResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        suites: output.suites != null ? deserializeAws_json1_1Suites(output.suites, context) : undefined,
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1ListTestGridProjectsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        testGridProjects: output.testGridProjects != null
            ? deserializeAws_json1_1TestGridProjects(output.testGridProjects, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTestGridSessionActionsResult = (output, context) => {
    return {
        actions: output.actions != null ? deserializeAws_json1_1TestGridSessionActions(output.actions, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListTestGridSessionArtifactsResult = (output, context) => {
    return {
        artifacts: output.artifacts != null ? deserializeAws_json1_1TestGridSessionArtifacts(output.artifacts, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListTestGridSessionsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        testGridSessions: output.testGridSessions != null
            ? deserializeAws_json1_1TestGridSessions(output.testGridSessions, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTestsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        tests: output.tests != null ? deserializeAws_json1_1Tests(output.tests, context) : undefined,
    };
};
const deserializeAws_json1_1ListUniqueProblemsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        uniqueProblems: output.uniqueProblems != null
            ? deserializeAws_json1_1UniqueProblemsByExecutionResultMap(output.uniqueProblems, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListUploadsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        uploads: output.uploads != null ? deserializeAws_json1_1Uploads(output.uploads, context) : undefined,
    };
};
const deserializeAws_json1_1ListVPCEConfigurationsResult = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        vpceConfigurations: output.vpceConfigurations != null
            ? deserializeAws_json1_1VPCEConfigurations(output.vpceConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1Location = (output, context) => {
    return {
        latitude: __limitedParseDouble(output.latitude),
        longitude: __limitedParseDouble(output.longitude),
    };
};
const deserializeAws_json1_1MaxSlotMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectInt32(value);
        return acc;
    }, {});
};
const deserializeAws_json1_1MonetaryAmount = (output, context) => {
    return {
        amount: __limitedParseDouble(output.amount),
        currencyCode: __expectString(output.currencyCode),
    };
};
const deserializeAws_json1_1NetworkProfile = (output, context) => {
    return {
        arn: __expectString(output.arn),
        description: __expectString(output.description),
        downlinkBandwidthBits: __expectLong(output.downlinkBandwidthBits),
        downlinkDelayMs: __expectLong(output.downlinkDelayMs),
        downlinkJitterMs: __expectLong(output.downlinkJitterMs),
        downlinkLossPercent: __expectInt32(output.downlinkLossPercent),
        name: __expectString(output.name),
        type: __expectString(output.type),
        uplinkBandwidthBits: __expectLong(output.uplinkBandwidthBits),
        uplinkDelayMs: __expectLong(output.uplinkDelayMs),
        uplinkJitterMs: __expectLong(output.uplinkJitterMs),
        uplinkLossPercent: __expectInt32(output.uplinkLossPercent),
    };
};
const deserializeAws_json1_1NetworkProfiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NetworkProfile(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1NotEligibleException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1NotFoundException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1Offering = (output, context) => {
    return {
        description: __expectString(output.description),
        id: __expectString(output.id),
        platform: __expectString(output.platform),
        recurringCharges: output.recurringCharges != null
            ? deserializeAws_json1_1RecurringCharges(output.recurringCharges, context)
            : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1OfferingPromotion = (output, context) => {
    return {
        description: __expectString(output.description),
        id: __expectString(output.id),
    };
};
const deserializeAws_json1_1OfferingPromotions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OfferingPromotion(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Offerings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Offering(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1OfferingStatus = (output, context) => {
    return {
        effectiveOn: output.effectiveOn != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.effectiveOn)))
            : undefined,
        offering: output.offering != null ? deserializeAws_json1_1Offering(output.offering, context) : undefined,
        quantity: __expectInt32(output.quantity),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1OfferingStatusMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_json1_1OfferingStatus(value, context);
        return acc;
    }, {});
};
const deserializeAws_json1_1OfferingTransaction = (output, context) => {
    return {
        cost: output.cost != null ? deserializeAws_json1_1MonetaryAmount(output.cost, context) : undefined,
        createdOn: output.createdOn != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.createdOn))) : undefined,
        offeringPromotionId: __expectString(output.offeringPromotionId),
        offeringStatus: output.offeringStatus != null ? deserializeAws_json1_1OfferingStatus(output.offeringStatus, context) : undefined,
        transactionId: __expectString(output.transactionId),
    };
};
const deserializeAws_json1_1OfferingTransactions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1OfferingTransaction(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PackageIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Problem = (output, context) => {
    return {
        device: output.device != null ? deserializeAws_json1_1Device(output.device, context) : undefined,
        job: output.job != null ? deserializeAws_json1_1ProblemDetail(output.job, context) : undefined,
        message: __expectString(output.message),
        result: __expectString(output.result),
        run: output.run != null ? deserializeAws_json1_1ProblemDetail(output.run, context) : undefined,
        suite: output.suite != null ? deserializeAws_json1_1ProblemDetail(output.suite, context) : undefined,
        test: output.test != null ? deserializeAws_json1_1ProblemDetail(output.test, context) : undefined,
    };
};
const deserializeAws_json1_1ProblemDetail = (output, context) => {
    return {
        arn: __expectString(output.arn),
        name: __expectString(output.name),
    };
};
const deserializeAws_json1_1Problems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Problem(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Project = (output, context) => {
    return {
        arn: __expectString(output.arn),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        defaultJobTimeoutMinutes: __expectInt32(output.defaultJobTimeoutMinutes),
        name: __expectString(output.name),
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
    };
};
const deserializeAws_json1_1Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Project(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PurchasedDevicesMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectInt32(value);
        return acc;
    }, {});
};
const deserializeAws_json1_1PurchaseOfferingResult = (output, context) => {
    return {
        offeringTransaction: output.offeringTransaction != null
            ? deserializeAws_json1_1OfferingTransaction(output.offeringTransaction, context)
            : undefined,
    };
};
const deserializeAws_json1_1Radios = (output, context) => {
    return {
        bluetooth: __expectBoolean(output.bluetooth),
        gps: __expectBoolean(output.gps),
        nfc: __expectBoolean(output.nfc),
        wifi: __expectBoolean(output.wifi),
    };
};
const deserializeAws_json1_1RecurringCharge = (output, context) => {
    return {
        cost: output.cost != null ? deserializeAws_json1_1MonetaryAmount(output.cost, context) : undefined,
        frequency: __expectString(output.frequency),
    };
};
const deserializeAws_json1_1RecurringCharges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RecurringCharge(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RemoteAccessSession = (output, context) => {
    return {
        arn: __expectString(output.arn),
        billingMethod: __expectString(output.billingMethod),
        clientId: __expectString(output.clientId),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        device: output.device != null ? deserializeAws_json1_1Device(output.device, context) : undefined,
        deviceMinutes: output.deviceMinutes != null ? deserializeAws_json1_1DeviceMinutes(output.deviceMinutes, context) : undefined,
        deviceUdid: __expectString(output.deviceUdid),
        endpoint: __expectString(output.endpoint),
        hostAddress: __expectString(output.hostAddress),
        instanceArn: __expectString(output.instanceArn),
        interactionMode: __expectString(output.interactionMode),
        message: __expectString(output.message),
        name: __expectString(output.name),
        remoteDebugEnabled: __expectBoolean(output.remoteDebugEnabled),
        remoteRecordAppArn: __expectString(output.remoteRecordAppArn),
        remoteRecordEnabled: __expectBoolean(output.remoteRecordEnabled),
        result: __expectString(output.result),
        skipAppResign: __expectBoolean(output.skipAppResign),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        status: __expectString(output.status),
        stopped: output.stopped != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.stopped))) : undefined,
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
    };
};
const deserializeAws_json1_1RemoteAccessSessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RemoteAccessSession(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RenewOfferingResult = (output, context) => {
    return {
        offeringTransaction: output.offeringTransaction != null
            ? deserializeAws_json1_1OfferingTransaction(output.offeringTransaction, context)
            : undefined,
    };
};
const deserializeAws_json1_1Resolution = (output, context) => {
    return {
        height: __expectInt32(output.height),
        width: __expectInt32(output.width),
    };
};
const deserializeAws_json1_1Rule = (output, context) => {
    return {
        attribute: __expectString(output.attribute),
        operator: __expectString(output.operator),
        value: __expectString(output.value),
    };
};
const deserializeAws_json1_1Rules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Rule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Run = (output, context) => {
    return {
        appUpload: __expectString(output.appUpload),
        arn: __expectString(output.arn),
        billingMethod: __expectString(output.billingMethod),
        completedJobs: __expectInt32(output.completedJobs),
        counters: output.counters != null ? deserializeAws_json1_1Counters(output.counters, context) : undefined,
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        customerArtifactPaths: output.customerArtifactPaths != null
            ? deserializeAws_json1_1CustomerArtifactPaths(output.customerArtifactPaths, context)
            : undefined,
        deviceMinutes: output.deviceMinutes != null ? deserializeAws_json1_1DeviceMinutes(output.deviceMinutes, context) : undefined,
        devicePoolArn: __expectString(output.devicePoolArn),
        deviceSelectionResult: output.deviceSelectionResult != null
            ? deserializeAws_json1_1DeviceSelectionResult(output.deviceSelectionResult, context)
            : undefined,
        eventCount: __expectInt32(output.eventCount),
        jobTimeoutMinutes: __expectInt32(output.jobTimeoutMinutes),
        locale: __expectString(output.locale),
        location: output.location != null ? deserializeAws_json1_1Location(output.location, context) : undefined,
        message: __expectString(output.message),
        name: __expectString(output.name),
        networkProfile: output.networkProfile != null ? deserializeAws_json1_1NetworkProfile(output.networkProfile, context) : undefined,
        parsingResultUrl: __expectString(output.parsingResultUrl),
        platform: __expectString(output.platform),
        radios: output.radios != null ? deserializeAws_json1_1Radios(output.radios, context) : undefined,
        result: __expectString(output.result),
        resultCode: __expectString(output.resultCode),
        seed: __expectInt32(output.seed),
        skipAppResign: __expectBoolean(output.skipAppResign),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        status: __expectString(output.status),
        stopped: output.stopped != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.stopped))) : undefined,
        testSpecArn: __expectString(output.testSpecArn),
        totalJobs: __expectInt32(output.totalJobs),
        type: __expectString(output.type),
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
        webUrl: __expectString(output.webUrl),
    };
};
const deserializeAws_json1_1Runs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Run(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Sample = (output, context) => {
    return {
        arn: __expectString(output.arn),
        type: __expectString(output.type),
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1Samples = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Sample(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ScheduleRunResult = (output, context) => {
    return {
        run: output.run != null ? deserializeAws_json1_1Run(output.run, context) : undefined,
    };
};
const deserializeAws_json1_1SecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ServiceAccountException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1StopJobResult = (output, context) => {
    return {
        job: output.job != null ? deserializeAws_json1_1Job(output.job, context) : undefined,
    };
};
const deserializeAws_json1_1StopRemoteAccessSessionResult = (output, context) => {
    return {
        remoteAccessSession: output.remoteAccessSession != null
            ? deserializeAws_json1_1RemoteAccessSession(output.remoteAccessSession, context)
            : undefined,
    };
};
const deserializeAws_json1_1StopRunResult = (output, context) => {
    return {
        run: output.run != null ? deserializeAws_json1_1Run(output.run, context) : undefined,
    };
};
const deserializeAws_json1_1SubnetIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Suite = (output, context) => {
    return {
        arn: __expectString(output.arn),
        counters: output.counters != null ? deserializeAws_json1_1Counters(output.counters, context) : undefined,
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        deviceMinutes: output.deviceMinutes != null ? deserializeAws_json1_1DeviceMinutes(output.deviceMinutes, context) : undefined,
        message: __expectString(output.message),
        name: __expectString(output.name),
        result: __expectString(output.result),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        status: __expectString(output.status),
        stopped: output.stopped != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.stopped))) : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1Suites = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Suite(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TagOperationException = (output, context) => {
    return {
        message: __expectString(output.message),
        resourceName: __expectString(output.resourceName),
    };
};
const deserializeAws_json1_1TagPolicyException = (output, context) => {
    return {
        message: __expectString(output.message),
        resourceName: __expectString(output.resourceName),
    };
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Test = (output, context) => {
    return {
        arn: __expectString(output.arn),
        counters: output.counters != null ? deserializeAws_json1_1Counters(output.counters, context) : undefined,
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        deviceMinutes: output.deviceMinutes != null ? deserializeAws_json1_1DeviceMinutes(output.deviceMinutes, context) : undefined,
        message: __expectString(output.message),
        name: __expectString(output.name),
        result: __expectString(output.result),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        status: __expectString(output.status),
        stopped: output.stopped != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.stopped))) : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1TestGridProject = (output, context) => {
    return {
        arn: __expectString(output.arn),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        description: __expectString(output.description),
        name: __expectString(output.name),
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1TestGridVpcConfig(output.vpcConfig, context) : undefined,
    };
};
const deserializeAws_json1_1TestGridProjects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TestGridProject(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestGridSession = (output, context) => {
    return {
        arn: __expectString(output.arn),
        billingMinutes: __limitedParseDouble(output.billingMinutes),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        ended: output.ended != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ended))) : undefined,
        seleniumProperties: __expectString(output.seleniumProperties),
        status: __expectString(output.status),
    };
};
const deserializeAws_json1_1TestGridSessionAction = (output, context) => {
    return {
        action: __expectString(output.action),
        duration: __expectLong(output.duration),
        requestMethod: __expectString(output.requestMethod),
        started: output.started != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.started))) : undefined,
        statusCode: __expectString(output.statusCode),
    };
};
const deserializeAws_json1_1TestGridSessionActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TestGridSessionAction(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestGridSessionArtifact = (output, context) => {
    return {
        filename: __expectString(output.filename),
        type: __expectString(output.type),
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1TestGridSessionArtifacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TestGridSessionArtifact(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestGridSessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TestGridSession(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestGridVpcConfig = (output, context) => {
    return {
        securityGroupIds: output.securityGroupIds != null
            ? deserializeAws_json1_1SecurityGroupIds(output.securityGroupIds, context)
            : undefined,
        subnetIds: output.subnetIds != null ? deserializeAws_json1_1SubnetIds(output.subnetIds, context) : undefined,
        vpcId: __expectString(output.vpcId),
    };
};
const deserializeAws_json1_1Tests = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Test(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TooManyTagsException = (output, context) => {
    return {
        message: __expectString(output.message),
        resourceName: __expectString(output.resourceName),
    };
};
const deserializeAws_json1_1TrialMinutes = (output, context) => {
    return {
        remaining: __limitedParseDouble(output.remaining),
        total: __limitedParseDouble(output.total),
    };
};
const deserializeAws_json1_1UniqueProblem = (output, context) => {
    return {
        message: __expectString(output.message),
        problems: output.problems != null ? deserializeAws_json1_1Problems(output.problems, context) : undefined,
    };
};
const deserializeAws_json1_1UniqueProblems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UniqueProblem(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UniqueProblemsByExecutionResultMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_json1_1UniqueProblems(value, context);
        return acc;
    }, {});
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateDeviceInstanceResult = (output, context) => {
    return {
        deviceInstance: output.deviceInstance != null ? deserializeAws_json1_1DeviceInstance(output.deviceInstance, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateDevicePoolResult = (output, context) => {
    return {
        devicePool: output.devicePool != null ? deserializeAws_json1_1DevicePool(output.devicePool, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateInstanceProfileResult = (output, context) => {
    return {
        instanceProfile: output.instanceProfile != null
            ? deserializeAws_json1_1InstanceProfile(output.instanceProfile, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateNetworkProfileResult = (output, context) => {
    return {
        networkProfile: output.networkProfile != null ? deserializeAws_json1_1NetworkProfile(output.networkProfile, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateProjectResult = (output, context) => {
    return {
        project: output.project != null ? deserializeAws_json1_1Project(output.project, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateTestGridProjectResult = (output, context) => {
    return {
        testGridProject: output.testGridProject != null
            ? deserializeAws_json1_1TestGridProject(output.testGridProject, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateUploadResult = (output, context) => {
    return {
        upload: output.upload != null ? deserializeAws_json1_1Upload(output.upload, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateVPCEConfigurationResult = (output, context) => {
    return {
        vpceConfiguration: output.vpceConfiguration != null
            ? deserializeAws_json1_1VPCEConfiguration(output.vpceConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1Upload = (output, context) => {
    return {
        arn: __expectString(output.arn),
        category: __expectString(output.category),
        contentType: __expectString(output.contentType),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        message: __expectString(output.message),
        metadata: __expectString(output.metadata),
        name: __expectString(output.name),
        status: __expectString(output.status),
        type: __expectString(output.type),
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1Uploads = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Upload(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1VpcConfig = (output, context) => {
    return {
        securityGroupIds: output.securityGroupIds != null
            ? deserializeAws_json1_1VpcSecurityGroupIds(output.securityGroupIds, context)
            : undefined,
        subnetIds: output.subnetIds != null ? deserializeAws_json1_1VpcSubnetIds(output.subnetIds, context) : undefined,
        vpcId: __expectString(output.vpcId),
    };
};
const deserializeAws_json1_1VPCEConfiguration = (output, context) => {
    return {
        arn: __expectString(output.arn),
        serviceDnsName: __expectString(output.serviceDnsName),
        vpceConfigurationDescription: __expectString(output.vpceConfigurationDescription),
        vpceConfigurationName: __expectString(output.vpceConfigurationName),
        vpceServiceName: __expectString(output.vpceServiceName),
    };
};
const deserializeAws_json1_1VPCEConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VPCEConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1VpcSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1VpcSubnetIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
